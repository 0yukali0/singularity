#!/bin/sh
# 
# Copyright (c) 2015-2016, Gregory M. Kurtzer
# All rights reserved.
# 
# Copyright (c) 2015-2016, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of
# any required approvals from the U.S. Dept. of Energy).
# All rights reserved.
# 
# 


if [ -z "$MESSAGELEVEL" ]; then
    /bin/echo "Warning: MESSAGELEVEL is undefined, temporarily setting to '5' (all messages)"
    MESSAGELEVEL=5
fi

if [ -z "$USER" ]; then
    USER=`id -un`
    export USER
fi
if [ -z "$HOME" ]; then
    HOME=`getent passwd "$USER" | cut -d : -f 6`
    export HOME
fi


message() {
    LEVEL="$1"
    MESSAGE="$2"
    if [ -z "$MESSAGE" ]; then
        return 0
    fi
    shift
    shift
    if [ "$LEVEL" -eq "0" ]; then
        tput -Txterm setaf 1 2>/dev/null
        printf "$MESSAGE" "$@" 1>&2
        tput -Txterm sgr0 2>/dev/null
    elif [ "$LEVEL" -le "$MESSAGELEVEL" ]; then
        if [ "$LEVEL" -eq "1" ]; then
            printf "$MESSAGE" "$@"
        else
            tput -Txterm dim 2>/dev/null
            printf "${GRAY}$MESSAGE${NORMAL}" "$@"
            tput -Txterm sgr0 2>/dev/null
        fi
    fi
    return 0
}


get_key_from_conf() {
    KEY="$1"
    FILE="$2"
    if OUT=`egrep -i "^$KEY:\s*" $FILE`; then
        echo "$OUT" | head -n 1 | sed -e "s@^$KEY:\s*@@i"
        return 0
    fi
    return 1
}

get_section_from_conf() {
    SECTION="$1"
    FILE="$2"
    TOGGLE=""
    if [ ! -f "$FILE" ]; then
        message 0 "ERROR: File not found ($FILE)\n"
        exit 1
    fi
    if ! grep -q "^%$SECTION" "$FILE"; then
        return 1
    fi
    cat "$FILE" | while read line; do
        if [ -n "$TOGGLE" ]; then
            if /bin/echo "$line" | grep -q "^%"; then
                # we are done...
                return 0
            fi
            /bin/echo "$line"
        else
            if /bin/echo "$line" | grep -q "^%$SECTION"; then
                TOGGLE=1
            fi
        fi
    done

    return 0
}

check_pattern() {
    STRING="$1"
    PATTERN="$2"
    case "$PATTERN" in
        $STRING)
            true
        ;;
        *)
            return 1
        ;;
    esac
    return 0
}

cmd() {
    message 1 " + %-68.68s" "$*"
    "$@" >/dev/null 2>&1
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
        message 2 "${GREEN}OK${NORMAL}\n"
    else
        message 2 "${RED}ERROR${NORMAL}\n"
    fi
    return $RETVAL
}


stest() {
    ERROR="$1"
    TMPFILE=`mktemp`
    shift
    message 1 " + %-60.60s " "$*"
    "$@" >$TMPFILE 2>&1
    CODE="$?"
    if [ "$ERROR" = "0" -a "$CODE" != "0" ]; then
        message 1 "%10s ${RED}ERROR${NORMAL}\n" "(retval=$CODE)"
        tail "$TMPFILE"
        echo "Full output in: $TMPFILE"
        exit 1
    elif [ "$ERROR" != "0" -a "$CODE" = "0" ]; then
        message 1 "%10s ${RED}ERROR${NORMAL}\n" "(retval=$CODE)"
        tail "$TMPFILE"
        echo "Full output in: $TMPFILE"
        exit 1
    else
        message 1 "%10s ${GREEN}OK${NORMAL}\n" "(retval=$CODE)"
    fi
    rm -f "$TMPFILE"
}


load_mod() {
    MOD="$1"
    if [ -z "$libexecdir" ]; then
        message 0 "ERROR: libexecdir not defined, are you running this from within Singularity?\n"
        exit 1
    fi
    if [ -f "$libexecdir/singularity/mods/$MOD.smod" ]; then
        . "$libexecdir/singularity/mods/$MOD.smod"
    else
        message 0 "ERROR: Could not load Singularity module: $MOD\n"
        exit 1
    fi
}


# Different versions of which respond differently (print aliases, or take
# different arguments)
singularity_which() {
    i="$1"
    if [ -x "$i" ]; then
        echo "$i"
        return 0
    fi
    for p in `echo $PATH | sed -e 's/:/ /g'`; do
        if [ -x "$p/$i" ]; then
            echo "$p/$i"
            return 0
        fi
    done
    return 1
}


parse_opts() {
    NEWOPTS=""
    for i in $@; do
        case "$i" in
            -*=*)
                ARG1=`echo -n "$i" | cut -d = -f 1`
                ARG2=`echo -n "$i" | cut -d = -f 2`
                NEWOPTS="$NEWOPTS \"$ARG1\" \"$ARG2\""
                shift
                continue
            ;;
            --*)
                NEWOPTS="$NEWOPTS \"$i\""
                shift
                continue
            ;;
            -*)
                for o in `echo -n "$i" | sed 's/^-//' | sed 's/./-& /g'`; do
                    NEWOPTS="$NEWOPTS \"$o\""
                done
                shift
                continue
            ;;
            *)  
                NEWOPTS="$NEWOPTS $@"
                break
            ;;
        esac
    done
    echo "$NEWOPTS"
}




if [ "$DEBUG" = "1" ]; then
    set -x
fi
