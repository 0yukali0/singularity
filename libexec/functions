#!/bin/sh
# 
# Copyright (c) 2015, Gregory M. Kurtzer
# All rights reserved.
# 
# Copyright (c) 2015, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of
# any required approvals from the U.S. Dept. of Energy).
# All rights reserved.
# 
# 


HEADER_END="SINGULARITY_END_HEADER"


if [ -z "$MESSAGELEVEL" ]; then
    /bin/echo "Warning: MESSAGELEVEL is undefined, temporarily setting to '5' (all messages)"
    MESSAGELEVEL=5
fi

GRAY=`tput dim`
RED=`tput setaf 1`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
BLUE=`tput setaf 4`
PINK=`tput setaf 5`
CYAN=`tput setaf 6`
WHITE=`tput setaf 7`
NORMAL=`tput sgr0`


message() {
    LEVEL="$1"
    shift
    MESSAGE="$1"
    shift
    if [ "$LEVEL" -eq "0" ]; then
        printf "${RED}$MESSAGE${NORMAL}" "$@" 1>&2
    elif [ "$LEVEL" -le "$MESSAGELEVEL" ]; then
        if [ "$LEVEL" -eq "1" ]; then
            printf "${NORMAL}$MESSAGE${NORMAL}" "$@"
        else
            printf "${GRAY}$MESSAGE${NORMAL}" "$@"
        fi
    fi
    return
}


get_key_from_conf() {
    KEY="$1"
    FILE="$2"
    if OUTPUT=`grep -i "^$KEY: " $FILE`; then
        /bin/echo "$OUTPUT" | sed -e "s@^$KEY: @@i"
        return 0
    fi
    return 1
}

get_section_from_conf() {
    SECTION="$1"
    FILE="$2"
    TOGGLE=""
    if [ ! -f "$FILE" ]; then
        message 0 "ERROR: File not found ($FILE)\n"
        exit 1
    fi
    if ! grep -q "^%$SECTION" "$FILE"; then
        return 1
    fi
    cat "$FILE" | while read line; do
        if [ -n "$TOGGLE" ]; then
            if /bin/echo "$line" | grep -q "^%"; then
                # we are done...
                return 0
            fi
            /bin/echo "$line"
        else
            if /bin/echo "$line" | grep -q "^%$SECTION"; then
                TOGGLE=1
            fi
        fi
    done

    return 0
}

install_file() {
    file="$1"
    targetdir="$2"
    installdir="$INSTALLDIR/c"
    RETVAL=0

    if [ -z "$INSTALLDIR" ]; then
        message 0 "ERROR: INSTALLDIR not defined\n"
        exit 1
    fi

    if [ -z "$file" ]; then
        message 0 "ERROR: called install_file with no file\n"
        return 0
    fi

    for i in "$file"; do # This expands globs
        if [ -n "$targetdir" ]; then
            target="$targetdir"
        else
            target=`dirname "$i"`
        fi

        if [ ! -d "$installdir/$target" ]; then
            message 4 "Creating target dir:   $target\n"
            mkdir -p "$installdir/$target"
        fi
        if [ -f "$installdir/$i" ]; then
            message 2 "File already included: $i\n"
        elif [ -f "$i" ]; then
            message 1 "Installing file: $i\n"
            cp -L "$i" "$installdir/$target" 2>&1
            RETVAL="$?"
        elif [ -d "$i" ]; then
            message 1 "Installing dir: $i\n"
            cp -rL "$i" "$installdir/$target" 2>&1
            RETVAL="$?"
        else
            message 0 "Could not find file: $i\n"
            return 1
        fi
    done
    return $RETVAL
}

check_pattern() {
    STRING=$1
    PATTERN=$2
    case "$PATTERN" in
        $STRING)
            true
        ;;
        *)
            return 1
        ;;
    esac
    return 0
}

cmd() {
    message 1 " + %-68.68s" "$*"
    "$@" >/dev/null 2>&1
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
        message 2 "${GREEN}OK${NORMAL}\n"
    else
        message 2 "${RED}ERROR${NORMAL}\n"
    fi
    return $RETVAL
}


stest() {
    ERROR="$1"
    shift
    message 1 " + %-60.60s " "$*"
    "$@" >/dev/null 2>&1
    CODE="$?"
    if [ "$ERROR" = "0" -a "$CODE" != "0" ]; then
        message 1 "%10s ${RED}ERROR${NORMAL}\n" "(retval=$CODE)"
        exit 1
    elif [ "$ERROR" != "0" -a "$CODE" = "0" ]; then
        message 1 "%10s ${RED}ERROR${NORMAL}\n" "(retval=$CODE)"
        exit 1
    else
        message 1 "%10s ${GREEN}OK${NORMAL}\n" "(retval=$CODE)"
    fi
}



run_module() {
    MODULE="$1"
    RETVAL=255
    if [ -x "$libexecdir/singularity/mods/$MODULE" ]; then
        message 3 "Running module: $MODULE\n"
        sh "$libexecdir/singularity/mods/$MODULE"
        RETVAL=$?
    else
        message 0 "ERROR: Unknown module: $MODULE\n"
    fi
    return $RETVAL
}

### Do logical things here ###


if [ -n "$SINGULARITY_CACHEDIR" ]; then
    USERNAME=`id -un`
    CACHEDIR="$SINGULARITY_CACHEDIR/sapp-cache.$USERNAME"
    TMPCACHEDIR="$SINGULARITY_CACHEDIR/tmp"
else
    CACHEDIR="$HOME/.sapp-cache"
    TMPCACHEDIR="/tmp"
fi

message 2 "Using CACHEDIR=$CACHEDIR\n"
message 2 "Using TMPCACHEDIR=$TMPCACHEDIR\n"

if [ ! -d "$CACHEDIR" ]; then
    message 2 "Creating CACHEDIR: $CACHEDIR\n"
    if ! mkdir -p "$CACHEDIR"; then
        message 0 "ERROR: Could not create CACHEDIR ($CACHEDIR)\n"
        exit 1
    fi
fi
if [ ! -d "$TMPCACHEDIR" ]; then
    message 2 "Creating TMPCACHEDIR: $TMPCACHEDIR\n"
    if ! mkdir -p "$TMPCACHEDIR"; then
        message 0 "ERROR: Could not create CACHEDIR ($TMPCACHEDIR)\n"
        exit 1
    fi
fi


if [ -z "$SAPPNAME" -a -n "$SAPPFILE" ]; then
    SAPPNAME=`basename "$SAPPFILE" | sed -e 's@.sapp$@@'`
fi
if [ -z "$SAPPDIR" -a -n "$SAPPNAME" ]; then
    SAPPDIR="$CACHEDIR/$SAPPNAME"
fi
if [ -z "$CONTAINERPATH" -a -n "$SAPPDIR" ]; then
    CONTAINERPATH="$SAPPDIR/c"
fi


export SAPPNAME SAPPDIR CONTAINERPATH

### Declare functions that depend on local bits above ###

sappname_exists() {
    SAPPNAME="$1"
    sappdir_exists "$CACHEDIR/$SAPPNAME"
    return $?
}

sappdir_exists() {
    SAPPDIR="$1"
    if [ -x "$SAPPDIR/c/singularity" ]; then
        return 0
    elif [ -d "$SAPPDIR" ]; then
        return 1
    else
        return 2
    fi
}


export CACHEDIR TMPCACHEDIR HEADER_END

if [ "$DEBUG" = "1" ]; then
    set -x
fi
