#!/bin/bash
# 
# Copyright (c) 2017, SingularityWare, LLC. All rights reserved.
#
# Copyright (c) 2015-2017, Gregory M. Kurtzer. All rights reserved.
# 
# Copyright (c) 2016-2017, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
# 
# This software is licensed under a customized 3-clause BSD license.  Please
# consult LICENSE file distributed with the sources of this project regarding
# your rights to use or distribute this software.
# 
# NOTICE.  This Software was developed under funding from the U.S. Department of
# Energy and the U.S. Government consequently retains certain rights. As such,
# the U.S. Government has been granted for itself and others acting on its
# behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software
# to reproduce, distribute copies to the public, prepare derivative works, and
# perform publicly and display publicly, and to permit other to do so. 
# 
# 


## Basic sanity
if [ -z "$SINGULARITY_libexecdir" ]; then
    echo "Could not identify the Singularity libexecdir."
    exit 1
fi

## Load functions
if [ -f "$SINGULARITY_libexecdir/singularity/functions" ]; then
    . "$SINGULARITY_libexecdir/singularity/functions"
else
    echo "Error loading functions: $SINGULARITY_libexecdir/singularity/functions"
    exit 1
fi

USERID=`id -ru`

while true; do
    case ${1:-} in
        -h|--help|help)
            if [ -e "$SINGULARITY_libexecdir/singularity/cli/$SINGULARITY_COMMAND.help" ]; then
                cat "$SINGULARITY_libexecdir/singularity/cli/$SINGULARITY_COMMAND.help"
            else
                message ERROR "No help exists for this command\n"
                exit 1
            fi
            exit
        ;;
        -s|--sandbox)
            if [ "$USERID" != "0" ]; then
                message WARNING "Building sandbox as non-root will result in wrong file permissions\n"
            fi
            SINGULARITY_SANDBOX=1
            shift
        ;;
        -w|--writable)
            if [ "$USERID" != "0" ]; then
                message ERROR "Writable images must be created as root\n"
                exit 1
            fi
            SINGULARITY_WRITABLE=1
            shift
        ;;
        -f|--force)
            SINGULARITY_FORCE=1
            shift
        ;;
        -*)
            message ERROR "Unknown option: ${1:-}\n"
            exit 1
        ;;
        *)
            break
        ;;
    esac
done

if [ -z "${2:-}" ]; then
    if [ -e "$SINGULARITY_libexecdir/singularity/cli/$SINGULARITY_COMMAND.help" ]; then
        head -n 1 "$SINGULARITY_libexecdir/singularity/cli/$SINGULARITY_COMMAND.help"
    else
        message ERROR "To see usage summary, try: singularity help $SINGULARITY_COMMAND\n"
    fi
    exit 0
fi


SINGULARITY_CONTAINER_OUTPUT="${1:-}"
shift

if [ -f "$SINGULARITY_CONTAINER_OUTPUT" ]; then
    if [ -n "${SINGULARITY_FORCE:-}" ]; then
        rm -f "$SINGULARITY_CONTAINER_OUTPUT"
    else
        message ERROR "Container already exists: $SINGULARITY_CONTAINER_OUTPUT\n"
        exit 1
    fi
fi

if [ -n "${SINGULARITY_SANDBOX:-}" ]; then
    if [ "$USERID" == "0" ]; then
        SINGULARITY_ROOTFS="$SINGULARITY_CONTAINER_OUTPUT"
        SINGULARITY_IMAGE="$SINGULARITY_CONTAINER_OUTPUT"
        SINGULARITY_ROOTFS_DIRNAME=`dirname "$SINGULARITY_ROOTFS"`
        SINGULARITY_ROOTFS_DIRNAME_OWNER=`stat -c '%u' $SINGULARITY_ROOTFS_DIRNAME`
        if [ "$USERID" != "$SINGULARITY_ROOTFS_DIRNAME_OWNER" ]; then
            echo "You should not run this command within a directory not owned by root"
            if [ -z "${SINGULARITY_FORCE:-}" ]; then
                exit 1
            fi
        fi
    fi
    if [ ! -d "$SINGULARITY_ROOTFS" ]; then
        if ! mkdir -p "$SINGULARITY_ROOTFS"; then
            message ERROR "Could not create sandbox!\n";
            exit 1
        fi
    fi
else
    if ! SINGULARITY_ROOTFS=`mktemp -d ${SINGULARITY_TMPDIR:-/tmp}/.singularity-build.XXXXXX`; then
        message ERROR "Failed to create temporary directory\n"
        ABORT 255
    fi
    SINGULARITY_IMAGE="$SINGULARITY_ROOTFS"
fi

export SINGULARITY_IMAGE SINGULARITY_ROOTFS

if [ -f "$1" ]; then
    message 1 "Using container recipe deffile: $1\n"
    case $1 in
        *.tar.gz)
            tar xzf "$1" -C "${SINGULARITY_ROOTFS}"
        ;;
        *.def|*Singularity)
            if [ "$USERID" != "0" ]; then
                echo "You must be the root user to run this command"
                exit 1
            fi
            SINGULARITY_BUILDDEF="$1"
            export SINGULARITY_BUILDDEF
            eval_abort "$SINGULARITY_libexecdir/singularity/bin/builddef"
        ;;
        *)
            message ERROR "Unsupported file type: $1\n"
            exit 1
        ;;
    esac
elif [ -d "$1" ]; then
    message 1 "Building image from sandbox: $1\n"
    rmdir "${SINGULARITY_ROOTFS}"
    SINGULARITY_ROOTFS="$1"
    SINGULARITY_NOCLEANUP=1
else
    case $1 in
        docker://*)
            SINGULARITY_CONTAINER="$1"
            if ! SINGULARITY_CONTENTS=`mktemp ${TMPDIR:-/tmp}/.singularity-layers.XXXXXXXX`; then
                message ERROR "Failed to create temporary directory\n"
                ABORT 255
            fi
            export SINGULARITY_CONTAINER SINGULARITY_CONTENTS
            eval_abort "$SINGULARITY_libexecdir/singularity/python/import.py"
            message 1 "Importing: base Singularity environment\n"
            zcat $SINGULARITY_libexecdir/singularity/bootstrap-scripts/environment.tar | (cd "$SINGULARITY_ROOTFS"; tar xf - ) || exit $?

            for i in `cat "$SINGULARITY_CONTENTS"`; do
                message 1 "Importing: $i\n"
                zcat "$i" | (cd "$SINGULARITY_ROOTFS"; tar --exclude=dev/* -xf - ) || exit $?
            done

            rm -f "$SINGULARITY_CONTENTS"
        ;;
        *)
            message ERROR "Unsupported location: $1\n"
            exit 1
        ;;
    esac
fi

if [ "$USERID" != "0" ]; then
    # This is required as some files in a container are not readable by owner and
    # thus fail to build when not root.
    chmod u+rw -R "$SINGULARITY_ROOTFS"
fi

if [ -z "${SINGULARITY_SANDBOX:-}" ]; then
    if [ -n "${SINGULARITY_WRITABLE:-}" ]; then
        CONTAINER_SIZE=`du -sm ${SINGULARITY_ROOTFS} | cut -f 1`
        IMAGE_SIZE=`echo "(${CONTAINER_SIZE:-768} * 1.25)/1" | bc`

        if [ "$IMAGE_SIZE" -lt 10 ]; then
            IMAGE_SIZE=10
        fi

        message 1 "Creating empty Singularity writable container\n"
        eval_abort singularity create --size ${IMAGE_SIZE} ${SINGULARITY_CONTAINER_OUTPUT}

        message 1 "Building Singularity image...\n"
        tar -cf - -C "$SINGULARITY_ROOTFS" . | eval_abort singularity image.import ${SINGULARITY_CONTAINER_OUTPUT}
    else
        message 1 "Building Singularity image...\n"
        if ! mksquashfs "$SINGULARITY_ROOTFS/" "$SINGULARITY_CONTAINER_OUTPUT" -noappend -all-root > /dev/null; then
            message ERROR "Failed squashing image, left template directory at: $SINGULARITY_CONTAINER_OUTPUT\n"
            exit 1
        fi
    fi
    if [ -z "${SINGULARITY_NOCLEANUP:-}" ]; then
        message 1 "Cleaning up...\n";
        rm -rf "$SINGULARITY_ROOTFS"
    fi
    chmod a+x "$SINGULARITY_CONTAINER_OUTPUT"
fi

message 1 "Singularity container built: $SINGULARITY_CONTAINER_OUTPUT\n"
