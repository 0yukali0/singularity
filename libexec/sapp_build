#!/bin/sh
# 
# Copyright (c) 2015, Gregory M. Kurtzer
# All rights reserved.
# 
# Copyright (c) 2015, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of
# any required approvals from the U.S. Dept. of Energy).
# All rights reserved.
# 
# 

if [ -z "$libexecdir" ]; then
    echo "Could not identify the Singularity libexecdir."
    exit 1
fi

if [ -f "$libexecdir/singularity/functions" ]; then
    . "$libexecdir/singularity/functions"
else
    echo "Error loading functions: $libexecdir/singularity/functions"
    exit 1
fi


SAPPSPEC="$1"

if [ -z "$SAPPSPEC" ]; then
    message 1 "SAPP specfile not given"
    exit 1
fi

if [ ! -f "$SAPPSPEC" ]; then
    message 1 "SAPP specfile not found"
    exit 1
fi


NAME=`get_key_from_conf "Name" $SAPPSPEC`
TMPDIR=`mktemp -d /tmp/.singularity.XXXXXXX`
SAPPFILENAME=`echo "$NAME" | sed -e 's@ @_@g'`
SAPPFILE="$SAPPFILENAME.sapp"

export TMPDIR SAPPSPEC SAPPFILE

message 1 "Building '$NAME'"
message 2 "Working directory: $TMPDIR"

for i in sapp_build_base sapp_build_deps_* sapp_build_archive; do
    if [ -f "$libexecdir/singularity/$i" ]; then
        message 3 "Running: $libexecdir/singularity/$i"
        sh "$libexecdir/singularity/$i"
        EXITCODE="$?"
        if [ "$EXITCODE" -ne 0 ]; then
            message 1 "Error thrown from module: $i"
            message 2 "Left tmpdir at $TMPDIR"
            exit $EXITCODE
        fi
    else
        message 1 "Error locating module: $i"
        message 2 "Left tmpdir at $TMPDIR"
        exit 1
    fi

done

rm -rf $TMPDIR

exit $RETVAL





RETVAL=0
TMPDIR=`mktemp -d /tmp/singularity-build.XXXXXXXX`
INCLUDEBIN="/bin/sh"
LIBSUFFIX=`uname -m | grep -qv x86_64 || echo 64`


includefile() {
    for file in $@; do
        DIRNAME=`dirname $file`
        if [ ! -d "$TMPDIR/$DIRNAME" ]; then
            mkdir -p "$TMPDIR/$DIRNAME"
        fi
        if [ ! -f "$TMPDIR/$file" ]; then
            echo "including file:        $file"
            cp -L "$file" "$TMPDIR/$file"
        fi
    done
}

includebin() {
    for file in $@; do
        DIRNAME=`dirname $file`
        if [ ! -d "$TMPDIR/$DIRNAME" ]; then
            mkdir -p "$TMPDIR/$DIRNAME"
        fi
        if [ ! -f "$TMPDIR/$file" ]; then
            echo "including program:     $file"
            cp -L "$file" "$TMPDIR/$file"
            ldd $file | sed -e 's@ @\n@g' | while read i; do
                if [ -f "$i" ]; then
                    echo " ->dependency:         $i"
                    if [ ! -d "$TMPDIR/lib$LIBSUFFIX" ]; then
                        mkdir -p "$TMPDIR/lib$LIBSUFFIX"
                    fi
                    if [ ! -f "$TMPDIR/lib$LIBSUFFIX/$BASENAME" ]; then
                        cp -L "$i" "$TMPDIR/lib$LIBSUFFIX/$BASENAME"
                    fi
                fi
            done
        fi
    done
}


cleanup() {
    rm -rf $TMPDIR
}


key_from_conf() {
    KEY="$1"
    FILE="$2"
    grep "^$KEY: " $FILE | while read i; do
        echo "$i" | sed -e "s@^$KEY: @@"
    done
}


usage() {
    echo "USAGE: $0 (options) [config] (output file)"
    echo
    echo "CONFIG:"
    echo "  The path to the configruation file spec that defines the application"
    echo "  stack you wish to include in the singularity package."
    echo
    echo "ARGUMENTS:"
    echo "  -h      Print usage summary"
    echo
}


while getopts ":c:" opt; do
    case $opt in
        h)
            usage
            exit
        ;;
        \?)
            echo "Invalid option -$OPTARG" >&2
            exit 1
        ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1;
        ;;
    esac
done

CONFIG=$1
shift
OUTPUT=$1
shift

if [ -z "$CONFIG" ]; then
    usage
    exit 1
fi


PROGRAM=`parseconf program $CONFIG`
FILE=`parseconf file $CONFIG`
RUNFILE=`parseconf run $CONFIG`
NAME=`parseconf name $CONFIG`


if [ -z "$PROGRAM" ]; then
    echo "PROGRAM is undefined!"
    exit 1
fi


if [ -z "$OUTPUT" ]; then
    if [ -z "$NAME" ]; then
        NAME=`basename $CONFIG`
    fi
    OUTPUT="$NAME.sapp"
fi

for i in $PROGRAM; do
    PROGRAM_BIN=`which $i 2>/dev/null`
    includebin $PROGRAM_BIN
#    includelddeps $PROGRAM_BIN
    if [ -z "$PROGFIRST" ]; then
        PROGFIRST="$i"
    fi
done 

for i in $FILE; do
    includefile $i
done


includebin $INCLUDEBIN

includefile /etc/ld.so.cache
includefile /etc/ld.so.conf
includefile /etc/ld.so.conf.d/*
includefile /dev/null

echo "#!/bin/sh" > $TMPDIR/run
echo "PATH=/bin:$PATH" >> $TMPDIR/run
echo "export PATH" >> $TMPDIR/run
if [ -n "$RUNFILE" ]; then
    echo "$RUNFILE" >> $TMPDIR/run
else
    echo "$PROGFIRST \$@" >> $TMPDIR/run
fi
chmod +x $TMPDIR/run


if $libexecdir/singularity/sapp_archive $TMPDIR $OUTPUT; then
    echo "WROTE: $OUTPUT"
    chmod +x $OUTPUT
    cleanup
else
    RETVAL=1
fi


exit $RETVAL












#################

DIRECTORY=$1
SAPPFILE=$2

if [ -z "$SAPPFILE" -o -z "$DIRECTORY" ]; then
    echo "USAGE: [SAPP DIRECTORY] [SAPP FILE]"
    exit 1
fi

if [ ! -d "$DIRECTORY" ]; then
    echo "ERROR: Could not find SAPP directory: $DIRECTORY"
    exit 1
fi

if [ ! -x "$DIRECTORY/run" ]; then
    echo "ERROR: Directory is not correct format: $DIRECTORY"
    exit 1
fi

if [ ! -d "$DIRECTORY" ]; then
    if ! mkdir -p "$DIRECTORY"; then
        echo "ERROR: Could not create target directory: $DIRECTORY"
        exit 1
    fi
fi


check_valid() {
    STRING=$1
    PATTERN=$2
    case $STRING in
        $PATTERN)
            true
        ;;
        *)
            echo "bad"
            return 1
        ;;
    esac
    return 0
}


# TODO Check for root here...


# Create SAPP file header
echo "#!/bin/env singularity" > $SAPPFILE
echo "PAYLOAD=7" >> $SAPPFILE
echo "DATE='`date +%Y.%m.%d`'" >> $SAPPFILE
echo "USER='`id -un`'" >> $SAPPFILE
echo "BUILDHOST='`hostname`'" >> $SAPPFILE
if [ -f "/etc/redhat-release" ]; then
    echo "OSVERSION='`cat /etc/redhat-release`'" >> $SAPPFILE
elif [ -f "/etc/debian-release" ]; then
    echo "OSVERSION='`cat /etc/debian-release`'" >> $SAPPFILE
fi

(cd $DIRECTORY; find . | cpio -o --quiet -H newc ) | gzip -c9 >> $SAPPFILE

exit 0
