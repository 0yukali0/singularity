#!/bin/bash
# 
# Copyright (c) 2015-2016, Gregory M. Kurtzer. All rights reserved.
# 
# “Singularity” Copyright (c) 2016, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
# 
# If you have questions about your rights to use or distribute this software,
# please contact Berkeley Lab's Innovation & Partnerships Office at
# IPO@lbl.gov.
# 
# NOTICE.  This Software was developed under funding from the U.S. Department of
# Energy and the U.S. Government consequently retains certain rights. As such,
# the U.S. Government has been granted for itself and others acting on its
# behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software
# to reproduce, distribute copies to the public, prepare derivative works, and
# perform publicly and display publicly, and to permit other to do so. 
# 
# 


load_mod install
load_mod cache
load_mod sappfile

INCLUDE_FILES0="/bin/sh"

INCLUDE_FILES1="strace"

INCLUDE_FILES2="arch cat cp date find id pwd ls ps stat touch uname"

INCLUDE_FILES3="awk basename cksum dd df du env expand expr false groups grep
head hostid install join link ln ls md5sum mkdir mkfifo mknod mktemp mv
nice nl nohup nproc numfmt od pathchk top printenv printf readlink realpath
rm rmdir runcon sed seq sort split stdbuf stty sum sync tac tail tee test tr
true tty unexpand uniq unlink users vdir wc who whoami yes vi
/etc/terminfo /usr/share/terminfo"

INCLUDE_LIBS="libnss_files*.so.* libnss_myhostname.so.* libnss_dns.so.* libnss?.so libnssutil?.so"

# Generate a UUID
SINGULARITY_UUID=`cat /proc/sys/kernel/random/uuid`


run_scriptlet() {
    SCRIPTLET="$1"
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi
    if [ -z "$SCRIPTLET" ]; then
        message ERROR "called run_scriptlet() with no script name\n"
        return 1
    fi

    message 1 "Running $SCRIPTLET scriptlet\n"
    ( get_section_from_conf "$SCRIPTLET" "$SAPPSPEC" || exit 1 ) | /bin/sh -x
    if [ "$?" != "0" ]; then
        message ERROR "'$SCRIPTLET' scriptlet exited non-zero\n"
        return 1
    fi

    return 0
}



build_init() {
    SAPPSPEC="$1"
    SAPPFILE="$2"
    if [ -z "$SAPPSPEC" ]; then
        message ERROR "Specfile is undefined\n"
        return 1
    fi
    if [ ! -f "$SAPPSPEC" ]; then
        message ERROR "No such specfile: $SAPPSPEC\n"
        return 1
    fi

    NAME=`get_key_from_conf "Name" $SAPPSPEC`
    SUMMARY=`get_key_from_conf "Summary" $SAPPSPEC`
    INSTALLDIR=`mktemp -d /tmp/.singularity.XXXXXXX`
    INSTALLROOT="$INSTALLDIR/c"
    DESTDIR="$INSTALLDIR/c"
    BUILD_INIT=1

    if [ -n "$NAME" ]; then
        SAPPNAME=`echo "$NAME" | sed -e 's@ @_@g'`
    else
        SAPPNAME=`basename $SAPPSPEC | sed -e 's@ @_@g'`
        NAME="$SAPPNAME"
    fi

    if [ -n "$SAPPFILE" ]; then
        if [ -d "$SAPPFILE" ]; then
            SAPPFILE=`echo "$SAPPFILE/$SAPPNAME.sapp" | sed -e 's@//@/@g'`
        else
            DIRNAME=`dirname "$SAPPFILE"`
            if [ ! -d "$DIRNAME" ]; then
                if ! mkdir -p "$DIRNAME"; then
                    message 1 "Could not create output directory\n"
                    exit 1
                fi
            fi
        fi
    else
        SAPPFILE="$SAPPNAME.sapp"
    fi

    message 1 "Creating temporary container path...\n"
    if [ ! -d "$INSTALLDIR/c" ]; then
        if ! mkdir -p "$INSTALLDIR/c" 2>/dev/null; then
            message ERROR "Could not create temporary root directory\n";
            exit 1
        fi
    fi

    message 2 "Checking SAPPFILE is writable...\n"
    if ! touch "$SAPPFILE" 2>/dev/null; then
        message ERROR "Could not create $SAPPFILE\n"
        exit 1
    fi

    if OUTPUT=`get_key_from_conf "NoDeps" "$SAPPSPEC"`; then
        if check_pattern 'y*' "$OUTPUT"; then
            NODEPS=1
        fi
    fi

    message 1 "Singularity App Container Name: $NAME.sapp\n"
    message 2 "Output file: $SAPPFILE\n"
    message 2 "Install directory: $INSTALLDIR\n"

    export NAME SAPPNAME SAPPFILE INSTALLDIR INSTALLROOT DESTDIR BUILD_INIT NODEPS

    return 0
}


build_buildscriptlet() {
    run_scriptlet "build"
    return $?
}


build_packages() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    message 1 "Evaluating: packages\n"
    get_section_from_conf "packages" $SAPPSPEC | while read pkg; do
        if [ -z "$pkg" ]; then
            continue
        fi
        if [ -x "/usr/bin/rpm" ]; then
            if rpm -q "$pkg" >/dev/null 2>&1; then
                rpm -ql "$pkg" | while read i; do
                    if ! install_file "$i"; then
                        message ERROR "Error: Failed processing file: $i\n"
                        exit 1
                    fi
                done
            else
                message ERROR "Package is not installed: $pkg\n"
            fi
        elif [ -x "/usr/bin/dpkg" ]; then
            message ERROR "We don't support dpkg yet... Coming soon!\n"
            exit 1
        fi
    done
    if [ "$?" -ne "0" ]; then
        return 1
    fi

    return 0
}


build_runtime() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    DEBUGOS=`get_key_from_conf "debugos" "$SAPPSPEC"`

    case ${DEBUGOS:-1} in
        no|0)       RUNTIMELEVEL=0; INCLUDE_FILES="$INCLUDE_FILES0" ;;
        1)          RUNTIMELEVEL=1; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1" ;;
        2)          RUNTIMELEVEL=2; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1 $INCLUDE_FILES2" ;;
        3)          RUNTIMELEVEL=3; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1 $INCLUDE_FILES2 $INCLUDE_FILES3" ;;
        yes|[4-9]*) RUNTIMELEVEL=4; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1 $INCLUDE_FILES2 $INCLUDE_FILES3" ;;
        *)          RUNTIMELEVEL=1; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1"; message ERROR "WARNING: DebugOS value unknown, using default\n" ;;
    esac

    message 1 "Building the runtime level: $RUNTIMELEVEL\n"

    for i in $INCLUDE_FILES; do
        if FILE=`singularity_which $i 2>/dev/null`; then
            if ! install_file "$FILE"; then
                message ERROR "Could not install: $FILE\n"
                exit 1
            fi
        elif [ -e "$i" ]; then
            if ! install_file "$i"; then
                message ERROR "Could not install: $i\n"
                exit 1
            fi
        fi
    done

    for i in $INCLUDE_LIBS; do
        for FILE in `find /lib* /usr/lib* -maxdepth 2 -name "$i" 2>/dev/null`; do
            if [ -e "$FILE" ]; then
                if ! install_file "$FILE"; then
                    message ERROR "Could not install: $FILE\n"
                    exit 1
                fi
            fi
        done
    done

    return 0
}


build_packageinstall() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    message 1 "Evaluating: Exec\n"
    get_key_from_conf "exec" "$SAPPSPEC" | while read prog args; do
        if FULLFILE=`singularity_which "$prog" 2>/dev/null`; then
            if ! install_file "$FULLFILE" "/bin"; then
                message ERROR "Could not install: $i\n"
                exit 1
            fi
        elif [ -e "$prog" ]; then
            message ERROR "Defined 'exec' is not executable: $prog\n"
            exit 1
        else
            message ERROR "Defined 'exec' is not found: $prog\n"
            exit 1
        fi
    done
    if [ "$?" -ne "0" ]; then
        return 1
    fi

    return 0
}


build_fileinstall() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    message 1 "Evaluating: files\n"
    get_section_from_conf "files" "$SAPPSPEC" | while read file; do
        if [ -n "$file" ]; then
            if ! install_file "$file"; then
                message ERROR "Could not install: $i\n"
                exit 1
            fi
        fi
    done
    if [ "$?" -ne "0" ]; then
        return 1
    fi

    return 0
}


build_installscriptlet() {
    run_scriptlet "install"
    return $?
}


build_configs() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    message 1 "Creating template configs\n"
    if [ ! -d "$INSTALLDIR/c/etc" ]; then
        if ! mkdir -p "$INSTALLDIR/c/etc" 2>/dev/null; then
            message ERROR "Could not create directory $INSTALLDIR/c/etc\n"
        fi
    fi

    message 1 "Including sanitized /etc/passwd\n"
    while read line; do
        ID=`echo "$line" | awk -F: '{print $3}'`
        if [ "$ID" -le 500 ]; then
            echo $line
        fi
    done < "/etc/passwd" > "$INSTALLDIR/c/etc/passwd"

    message 1 "Including sanitized /etc/group\n"
    while read line; do
        ID=`echo "$line" | awk -F: '{print $3}'`
        if [ "$ID" -le 500 ]; then
            echo $line
        fi
    done < "/etc/group" > "$INSTALLDIR/c/etc/group"

    if [ -f "$INSTALLDIR/c/etc/shadow" ]; then
        message WARNING "Found /etc/shadow in container, sanitizing it...\n"
        cat /dev/null > "$INSTALLDIR/c/etc/shadow"
    fi

    if [ -f "$INSTALLDIR/c/etc/machine-id" ]; then
        message WARNING "Found /etc/machine-id in container, sanitizing it...\n"
        if OPENSSL=`singularity_which openssl`; then
            $OPENSSL rand -hex 16 > "$INSTALLDIR/c/etc/machine-id1"
            mv --force "$INSTALLDIR/c/etc/machine-id1" "$INSTALLDIR/c/etc/machine-id"
        else
            message ERROR "Could not sanitize /etc/machine-id because openssl is not in path\n"
        fi
    fi

    return 0
}



build_filecleanup() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    if OUTPUT=`get_key_from_conf "NoLocale" "$SAPPSPEC"`; then
        if check_pattern 'y*' "$OUTPUT"; then
            message 1 "Removing all locales\n";
            find "$INSTALLDIR/c/" -name "*locale*" -type f | xargs rm -f
            find "$INSTALLDIR/c/" -path '*/LC_MESSAGES/*.mo' -type f | xargs rm -f
        fi
    fi

    message 1 "Cleaning up device files\n"
    rm -f $INSTALLDIR/c/dev/*

    return 0
}


build_postscriptlet() {
    run_scriptlet "post"
    return $?
}



build_runscripts() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    message 1 "Defining container shell environment\n"
    LIB_SEARCH_PATH=`cd "$INSTALLDIR/c"; find . -name "lib*.so*" -type f | xargs -n 1 dirname 2>/dev/null | sort | uniq | sed -e 's/^\.//' | tr '\n' ':'`

    echo "PATH=/bin:/usr/bin:/sbin:/usr/sbin" >> "$INSTALLDIR/c/.singularity.env"
    echo "LANG=C" >> "$INSTALLDIR/c/.singularity.env"
    echo "PS1=\"singularity.\$SAPPNAME> \"" >> "$INSTALLDIR/c/.singularity.env"

    if [ -n "$LIB_SEARCH_PATH" ]; then
        echo "LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:$LIB_SEARCH_PATH\"" >> "$INSTALLDIR/c/.singularity.env"
    fi

    echo "export PATH LANG PS1 LD_LIBRARY_PATH" >> "$INSTALLDIR/c/.singularity.env"


    message 1 "Building singularity main runscript\n"
cat <<EOF > "$INSTALLDIR/c/singularity"
#!/bin/sh

if [ -f "/.singularity.env" ]; then
    . /.singularity.env
fi

if test -z "\$SINGULARITY_COMMAND"; then
    echo "ERROR: Singularity command undefined"
    exit 1
fi

if test "\$SINGULARITY_COMMAND" = "run" -o -n "\$SINGULARITY_INSHELL"; then
    if test -n "\$SINGULARITY_ALTERNATECOMMAND"; then
        exec \$SINGULARITY_ALTERNATECOMMAND "\$@"
    elif test -x "/.singularity.exec"; then
        exec /.singularity.exec "\$@"
    else
        echo "ERROR: Could not exec the singularity"
        exit 1
    fi
elif test "\$SINGULARITY_COMMAND" = "strace"; then
    if test ! -x "/bin/strace" -a ! -x "/usr/bin/strace"; then
        echo "Strace is not found within the container..."
        exit 1
    fi
    if test -x "/.singularity.exec"; then
        exec strace -f /.singularity.exec "\$@"
    else
        echo "ERROR: Could not exec the singularity"
        exit 1
    fi
elif test "\$SINGULARITY_COMMAND" = "test"; then
    if test -x "/.singularity.test"; then
        exec /.singularity.test "\$@"
    else
        echo "Hello from within the container... (no test code defined)"
    fi
elif test "\$SINGULARITY_COMMAND" = "shell"; then
    SINGULARITY_INSHELL=1
    export SINGULARITY_INSHELL
    exec /bin/sh
else
    echo "ERROR: Unsupported singularity exec command: \$SINGULARITY_COMMAND"
    exit 1
fi
exit 0
EOF

    message 1 "Building singularity test runscript\n"
    echo "#!/bin/sh" > "$INSTALLDIR/c/.singularity.test"
    echo "set -x" >> "$INSTALLDIR/c/.singularity.test"
    if get_section_from_conf "test" "$SAPPSPEC" >> "$INSTALLDIR/c/.singularity.test"; then
        chmod 755 "$INSTALLDIR/c/.singularity.test"
    else
        rm -f "$INSTALLDIR/c/.singularity.test"
    fi

    message 1 "Building singularity exec runscript\n"
    echo "#!/bin/sh" > "$INSTALLDIR/c/.singularity.exec"
    if ! get_section_from_conf "runscript" "$SAPPSPEC" >> "$INSTALLDIR/c/.singularity.exec"; then
        message 2 "generating a basic singularity runscript\n"
        if OUTPUT=`get_key_from_conf "exec" "$SAPPSPEC"`; then
            echo "$OUTPUT" | while read prog args; do
                progname=`basename "$prog"`
                if [ -n "$args" ]; then
                    echo "exec \"/bin/$progname\" \"$args\" \"\$@\"" >> "$INSTALLDIR/c/.singularity.exec"
                else
                    echo "exec \"/bin/$progname\" \"\$@\"" >> "$INSTALLDIR/c/.singularity.exec"
                fi
                break
            done
        else
            message ERROR "no runscript or program to exec defined!\n"
            exit 1
        fi
    fi

    chmod 755 "$INSTALLDIR/c/singularity"
    chmod 755 "$INSTALLDIR/c/.singularity.exec"
    chmod 755 "$INSTALLDIR/c/.singularity.env"

    return 0
}


build_test() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    echo "Running test..."
    CONTAINERPATH="$INSTALLDIR/c"
    SINGULARITY_COMMAND="test"
    SINGULARITY_CONTAIN=1
    export CONTAINERPATH SINGULARITY_COMMAND SINGULARITY_CONTAIN
    sh -c "$libexecdir/singularity/sexec" "$@"

    return 0
}


build_meta() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    message 1 "Including specfile\n"
    cat "$SAPPSPEC" > "$INSTALLDIR/spec"

    message 1 "Writing metadata\n"
    get_key_from_conf "name" "$SAPPSPEC" > "$INSTALLDIR/name"
    get_key_from_conf "Summary" "$SAPPSPEC" > "$INSTALLDIR/summary"
    get_key_from_conf "Maintainer" "$SAPPSPEC" > "$INSTALLDIR/maintainer"

    if [ -f "/etc/os-release" ]; then
        ID=`grep "^ID=" /etc/os-release | sed -e 's/ID="//' | sed -e 's/"$//'`
        VERSION_ID=`grep "^VERSION_ID=" /etc/os-release | sed -e 's/VERSION_ID="//' | sed -e 's/"$//'`
    elif [ -f "/etc/redhat-release" ]; then
        ID=`cat /etc/redhat-release | sed s/\ .*//`
        VERSION_ID=`cat /etc/redhat-release | sed s/.*release\ // | sed 's/\..*$//'`
    else
        ID="non-lsb"
        VERSION_ID=""
    fi
    echo "$ID $VERSION_ID" > "$INSTALLDIR/build_dist"
    uname -r > "$INSTALLDIR/build_kernel"

    echo "$SINGULARITY_UUID" > "$INSTALLDIR/uuid"

    return 0
}


build_sappfile() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    message 1 "Creating output SAPP container\n"
    echo "#!/usr/bin/env sapprun" > $SAPPFILE
    echo "Name: $NAME" >> $SAPPFILE
    echo "Summary: $SUMMARY" >> $SAPPFILE
    echo "UUID: $SINGULARITY_UUID" >> $SAPPFILE
    echo "$HEADER_END" >> $SAPPFILE


    (cd "$INSTALLDIR"; find . | cpio -o --quiet -H newc ) | gzip -c9 >> "$SAPPFILE"
    echo "WROTE: $SAPPFILE"

    chmod +x "$SAPPFILE"

    return 0
}


build_cleanup() {
    if [ -n "$INSTALLDIR" ]; then
        message 1 "Cleaning up temporary files...\n"
        rm -rf "$INSTALLDIR"
    fi
}


build_all() {
    if [ -z "$BUILD_INIT" ]; then
        message ERROR "Has build_init() been run?\n"
        return 1
    fi

    build_buildscriptlet        || return 1
    build_packages              || return 1
    build_runtime               || return 1
    build_packageinstall        || return 1
    build_fileinstall           || return 1
    build_installscriptlet      || return 1
    build_configs               || return 1
    build_filecleanup           || return 1
    build_postscriptlet         || return 1
    build_runscripts            || return 1
    build_test                  || return 1
    build_meta                  || return 1
    build_sappfile              || return 1
    build_cleanup               || return 1

    return 0
}

