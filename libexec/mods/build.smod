#!/bin/sh
# 
# Copyright (c) 2015-2016, Gregory M. Kurtzer
# All rights reserved.
# 
# Copyright (c) 2015-2016, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of
# any required approvals from the U.S. Dept. of Energy).
# All rights reserved.
# 
# 

load_mod install
load_mod cache
load_mod sappfile

INCLUDE_FILES0="/bin/sh"

INCLUDE_FILES1="strace"

INCLUDE_FILES2="arch cat cp date find id pwd ls ps stat touch uname"

INCLUDE_FILES3="basename cksum dd df du env expand expr false groups head
hostid install join link ln ls md5sum mkdir mkfifo mknod mktemp mv nice
nl nohup nproc numfmt od pathchk top printenv printf readlink realpath rm
rmdir runcon seq sort split stdbuf stty sum sync tac tail tee test tr
true tty unexpand uniq unlink users vdir wc who whoami yes vi
/etc/terminfo /usr/share/terminfo"


run_scriptlet() {
    SCRIPTLET="$1"
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi
    if [ -z "$SCRIPTLET" ]; then
        message 0 "ERROR: called run_scriptlet() with no script name\n"
        return 1
    fi

    message 1 "Running $SCRIPTLET scriptlet\n"
    ( get_section_from_conf "$SCRIPTLET" "$SAPPSPEC" || exit 1 ) | /bin/sh -x
    if [ "$?" != "0" ]; then
        message 0 "ERROR: '$SCRIPTLET' scriptlet exited non-zero\n"
        return 1
    fi

    return 0
}



build_init() {
    SAPPSPEC="$1"
    SAPPFILE="$2"
    if [ -z "$SAPPSPEC" ]; then
        message 0 "ERROR: Specfile is undefined\n"
        return 1
    fi
    if [ ! -f "$SAPPSPEC" ]; then
        message 0 "ERROR: No such specfile: $SAPPSPEC\n"
        return 1
    fi

    NAME=`get_key_from_conf "Name" $SAPPSPEC`
    SUMMARY=`get_key_from_conf "Summary" $SAPPSPEC`
    INSTALLDIR=`mktemp -d /tmp/.singularity.XXXXXXX`
    INSTALLROOT="$INSTALLDIR/c"
    DESTDIR="$INSTALLDIR/c"
    BUILD_INIT=1

    if [ -n "$NAME" ]; then
        SAPPNAME=`echo "$NAME" | sed -e 's@ @_@g'`
    else
        SAPPNAME=`basename $SAPPSPEC | sed -e 's@ @_@g'`
        NAME="$SAPPNAME"
    fi

    if [ -n "$SAPPFILE" ]; then
        if [ -d "$SAPPFILE" ]; then
            SAPPFILE=`echo "$SAPPFILE/$SAPPNAME.sapp" | sed -e 's@//@/@g'`
        else
            DIRNAME=`dirname "$SAPPFILE"`
            if [ ! -d "$DIRNAME" ]; then
                if ! mkdir -p "$DIRNAME"; then
                    message 1 "Could not create output directory\n"
                    exit 1
                fi
            fi
        fi
    else
        SAPPFILE="$SAPPNAME.sapp"
    fi

    message 1 "Creating temporary container path...\n"
    if [ ! -d "$INSTALLDIR/c" ]; then
        if ! mkdir -p "$INSTALLDIR/c" 2>/dev/null; then
            message 0 "ERROR: Could not create temporary root directory\n";
            exit 1
        fi
    fi

    message 2 "Checking SAPPFILE is writable...\n"
    if ! touch "$SAPPFILE" 2>/dev/null; then
        message 0 "ERROR: Could not create $SAPPFILE\n"
        exit 1
    fi

    message 1 "Singularity App Container Name: $NAME.sapp\n"
    message 2 "Output file: $SAPPFILE\n"
    message 2 "Install directory: $INSTALLDIR\n"

    export NAME SAPPNAME SAPPFILE INSTALLDIR INSTALLROOT DESTDIR BUILD_INIT

    return 0
}


build_buildscriptlet() {
    run_scriptlet "build"
    return $?
}


build_packages() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    message 1 "Evaluating: packages\n"
    get_section_from_conf "packages" $SAPPSPEC | while read pkg; do
        if [ -z "$pkg" ]; then
            continue
        fi
        if [ -x "/usr/bin/rpm" ]; then
            if rpm -q "$pkg" >/dev/null 2>&1; then
                rpm -ql "$pkg" | while read i; do
                    if ! install_file "$i"; then
                        message 0 "Error: Failed processing file: $i\n"
                        exit 1
                    fi
                done
            else
                message 0 "Package is not installed: $pkg\n"
            fi
        elif [ -x "/usr/bin/dpkg" ]; then
            message 0 "ERROR: We don't support dpkg yet... Coming soon!\n"
            exit 1
        fi
    done
    if [ "$?" -ne "0" ]; then
        return 1
    fi

    return 0
}


build_runtime() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    DEBUGOS=`get_key_from_conf "debugos" "$SAPPSPEC"`

    case ${DEBUGOS:-1} in
        no|0)       RUNTIMELEVEL=0; INCLUDE_FILES="$INCLUDE_FILES0" ;;
        1)          RUNTIMELEVEL=1; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1" ;;
        2)          RUNTIMELEVEL=2; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1 $INCLUDE_FILES2" ;;
        3)          RUNTIMELEVEL=3; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1 $INCLUDE_FILES2 $INCLUDE_FILES3" ;;
        yes|[4-9]*) RUNTIMELEVEL=4; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1 $INCLUDE_FILES2 $INCLUDE_FILES3" ;;
        *)          RUNTIMELEVEL=1; INCLUDE_FILES="$INCLUDE_FILES0 $INCLUDE_FILES1"; message 0 "WARNING: DebugOS value unknown, using default\n" ;;
    esac

    message 1 "Building the runtime level: $RUNTIMELEVEL\n"

    for i in $INCLUDE_FILES; do
        if FILE=`which --skip-functions --skip-alias $i 2>/dev/null`; then
            if ! install_file "$FILE" "/bin"; then
                message 0 "ERROR: Could not install: $FILE\n"
                exit 1
            fi
        elif [ -e "$i" ]; then
            if ! install_file "$i"; then
                message 0 "ERROR: Could not install: $i\n"
                exit 1
            fi
        fi
    done
    if [ "$?" -ne "0" ]; then
        return 1
    fi

    return 0
}


build_packageinstall() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    message 1 "Evaluating: Exec\n"
    get_key_from_conf "exec" "$SAPPSPEC" | while read prog args; do
        if FULLFILE=`which --show-dot "$prog" 2>/dev/null`; then
            if ! install_file "$FULLFILE" "/bin"; then
                message 0 "ERROR: Could not install: $i\n"
                exit 1
            fi
        elif [ -e "$prog" ]; then
            message 0 "ERROR: Defined 'exec' is not executable: $prog\n"
            exit 1
        else
            message 0 "ERROR: Defined 'exec' is not found: $prog\n"
            exit 1
        fi
    done
    if [ "$?" -ne "0" ]; then
        return 1
    fi

    return 0
}


build_fileinstall() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    message 1 "Evaluating: files\n"
    get_section_from_conf "files" "$SAPPSPEC" | while read file dir; do
        if [ -n "$file" ]; then
            if ! install_file "$file" "$dir"; then
                message 0 "ERROR: Could not install: $i\n"
                exit 1
            fi
        fi
    done
    if [ "$?" -ne "0" ]; then
        return 1
    fi

    return 0
}


build_installscriptlet() {
    run_scriptlet "install"
    return $?
}


build_configs() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    message 1 "Creating template configs\n"
    if [ ! -d "$INSTALLDIR/c/etc" ]; then
        if ! mkdir -p "$INSTALLDIR/c/etc" 2>/dev/null; then
            message 0 "ERROR: Could not create directory $INSTALLDIR/c/etc\n"
        fi
    fi


    message 1 "  /etc/nsswitch.conf\n";
    echo "passwd:     files sss" > "$INSTALLDIR/c/etc/nsswitch.conf"
    echo "shadow:     files sss" >> "$INSTALLDIR/c/etc/nsswitch.conf"
    echo "group:      files sss" >> "$INSTALLDIR/c/etc/nsswitch.conf"
    echo "hosts:      files dns myhostname" >> "$INSTALLDIR/c/etc/nsswitch.conf"

    message 1 "  /etc/resolv.conf\n";
    echo "nameserver 8.8.8.8" > "$INSTALLDIR/c/etc/resolv.conf"

    message 1 "  /etc/hosts\n";
    echo "127.0.0.1 localhost" > "$INSTALLDIR/c/etc/hosts"

    message 1 "Checking for files that need santizing\n"
    if [ -f "$INSTALLDIR/c/etc/passwd" ]; then
        message 1 "Found /etc/passwd in container, sanitizing it...\n"
        while read line; do
            ID=`echo "$line" | awk -F: '{print $3}'`
            if [ "$ID" -le 500 ]; then
                echo $line
            fi
        done < "$INSTALLDIR/c/etc/passwd" > "$INSTALLDIR/c/etc/passwd.1"
        cat "$INSTALLDIR/c/etc/passwd.1" > "$INSTALLDIR/c/etc/passwd"
        rm -f "$INSTALLDIR/c/etc/passwd.1"
    fi

    if [ -f "$INSTALLDIR/c/etc/group" ]; then
        message 1 "Found /etc/group in container, sanitizing it...\n"
        while read line; do
            ID=`echo "$line" | awk -F: '{print $3}'`
            if [ "$ID" -le 500 ]; then
                echo $line
            fi
        done < "$INSTALLDIR/c/etc/group" > "$INSTALLDIR/c/etc/group.1"
        cat "$INSTALLDIR/c/etc/group.1" > "$INSTALLDIR/c/etc/group"
        rm -f "$INSTALLDIR/c/etc/group.1"
    fi

    if [ -f "$INSTALLDIR/c/etc/shadow" ]; then
        message 1 "Found /etc/shadow in container, sanitizing it...\n"
        cat /dev/null > "$INSTALLDIR/c/etc/shadow"
    fi

    return 0
}



build_filecleanup() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    # TODO: Make this configurable
    LOCALE_ARCHIVE=`find $INSTALLDIR/c -type f -name "locale-archive"`
    if [ -n "$LOCALE_ARCHIVE" ]; then
        message 1 "Found locale-archive, removing...\n"
        rm -f $LOCALE_ARCHIVE
    fi

    message 1 "Cleaning up device files\n"
    rm -f $INSTALLDIR/c/dev/*

    return 0
}


build_postscriptlet() {
    run_scriptlet "post"
    return $?
}



build_runscripts() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    message 1 "Defining container shell envrionment\n"
    LIB_SEARCH_PATH=`cd "$INSTALLDIR/c"; find . -name "lib*.so*" -type f | xargs -n 1 dirname 2>/dev/null | sort | uniq | sed -e 's/^\.//' | tr '\n' ':'`
    PYTHONHOME=`cd "$INSTALLDIR/c"; find . \( -perm -0100 -or -perm -0010 -or -perm -0001 \) -name python -print | sed -e 's/^\.//' | sed -e 's/\/bin\/python$//'`

    echo "declare -x PATH=/bin:/usr/bin:/sbin:/usr/sbin" >> "$INSTALLDIR/c/.singularity.env"
    echo "declare -x LANG=C" >> "$INSTALLDIR/c/.singularity.env"
    echo "declare -x PS1=\"singularity.\$SAPPNAME> \"" >> "$INSTALLDIR/c/.singularity.env"

    if [ -n "$LIB_SEARCH_PATH" ]; then
        echo "declare -x LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:$LIB_SEARCH_PATH\"" >> "$INSTALLDIR/c/.singularity.env"
    fi

    if [ -n "$PYTHONHOME" ]; then
        echo "declare -x PYTHONHOME=\"$PYTHONHOME\"" >> "$INSTALLDIR/c/.singularity.env"
    fi


    message 1 "Building singularity main runscript\n"
cat <<EOF > "$INSTALLDIR/c/singularity"
#!/bin/sh

if [ -f "/.singularity.env" ]; then
    . /.singularity.env
fi

if test -z "\$SINGULARITY_COMMAND"; then
    echo "ERROR: Singularity command undefined"
    exit 1
fi

if test "\$SINGULARITY_COMMAND" = "run" -o -n "\$SINGULARITY_INSHELL"; then
    if test -x "/.singularity.exec"; then
        exec /.singularity.exec "\$@"
    else
        echo "ERROR: Could not exec the singularity"
        exit 1
    fi
elif test "\$SINGULARITY_COMMAND" = "strace"; then
    if test ! -x "/bin/strace" -a ! -x "/usr/bin/strace"; then
        echo "Strace is not found within the container..."
        exit 1
    fi
    if test -x "/.singularity.exec"; then
        exec strace -f /.singularity.exec "\$@"
    else
        echo "ERROR: Could not exec the singularity"
        exit 1
    fi
elif test "\$SINGULARITY_COMMAND" = "test"; then
    if test -x "/.singularity.test"; then
        exec /.singularity.test "\$@"
    else
        echo "Hello from within the container... (no test code defined)"
    fi
elif test "\$SINGULARITY_COMMAND" = "shell"; then
    SINGULARITY_INSHELL=1
    export SINGULARITY_INSHELL
    exec /bin/sh
else
    echo "ERROR: Unsupported singularity exec command: \$SINGULARITY_COMMAND"
    exit 1
fi
exit 0
EOF

    message 1 "Building singularity test runscript\n"
    echo "#!/bin/sh" > "$INSTALLDIR/c/.singularity.test"
    echo "set -x" >> "$INSTALLDIR/c/.singularity.test"
    if get_section_from_conf "test" "$SAPPSPEC" >> "$INSTALLDIR/c/.singularity.test"; then
        chmod 755 "$INSTALLDIR/c/.singularity.test"
    else
        rm -f "$INSTALLDIR/c/.singularity.test"
    fi

    message 1 "Building singularity exec runscript\n"
    echo "#!/bin/sh" > "$INSTALLDIR/c/.singularity.exec"
    if ! get_section_from_conf "runscript" "$SAPPSPEC" >> "$INSTALLDIR/c/.singularity.exec"; then
        message 2 "generating a basic singularity runscript\n"
        if OUTPUT=`get_key_from_conf "exec" "$SAPPSPEC"`; then
            echo "$OUTPUT" | while read prog args; do
                progname=`basename "$prog"`
                if [ -n "$args" ]; then
                    echo "exec \"/bin/$progname\" \"$args\" \"\$@\"" >> "$INSTALLDIR/c/.singularity.exec"
                else
                    echo "exec \"/bin/$progname\" \"\$@\"" >> "$INSTALLDIR/c/.singularity.exec"
                fi
                break
            done
        else
            message 0 "ERROR: no runscript or program to exec defined!\n"
            exit 1
        fi
    fi

    chmod 755 "$INSTALLDIR/c/singularity"
    chmod 755 "$INSTALLDIR/c/.singularity.exec"
    chmod 755 "$INSTALLDIR/c/.singularity.env"

    return 0
}


build_test() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    message 1 "Running test...\n"
    CONTAINERPATH="$INSTALLDIR/c"
    SINGULARITY_COMMAND="test"
    export CONTAINERPATH SINGULARITY_COMMAND
    sh -c "$libexecdir/singularity/sexec" "$@"

    return 0
}


build_meta() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    message 1 "Including specfile\n"
    cat "$SAPPSPEC" > "$INSTALLDIR/spec"

    message 1 "Calculating checksums\n"
    (cd "$INSTALLDIR/c"; find . -type f | xargs md5sum) > "$INSTALLDIR/files"

    message 1 "Writing metadata\n"
    get_key_from_conf "Summary" "$SAPPSPEC" > "$INSTALLDIR/summary"
    get_key_from_conf "Maintainer" "$SAPPSPEC" > "$INSTALLDIR/maintainer"

    return 0
}


build_sappfile() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    message 1 "Creating output SAPP container\n"
    echo "#!/usr/bin/env sapprun" > $SAPPFILE
    echo "Name: $NAME" >> $SAPPFILE
    echo "Summary: $SUMMARY" >> $SAPPFILE
    echo "$HEADER_END" >> $SAPPFILE

    (cd "$INSTALLDIR"; find . | cpio -o --quiet -H newc ) | gzip -c9 >> "$SAPPFILE"
    message 1 "WROTE: $SAPPFILE\n"

    chmod +x "$SAPPFILE"

    return 0
}


build_all() {
    if [ -z "$BUILD_INIT" ]; then
        message 0 "ERROR: Has build_init() been run?\n"
        return 1
    fi

    build_buildscriptlet        || return 1
    build_packages              || return 1
    build_runtime               || return 1
    build_packageinstall        || return 1
    build_fileinstall           || return 1
    build_installscriptlet      || return 1
    build_configs               || return 1
    build_filecleanup           || return 1
    build_postscriptlet         || return 1
    build_runscripts            || return 1
    build_test                  || return 1
    build_meta                  || return 1
    build_sappfile              || return 1

    return 0
}

