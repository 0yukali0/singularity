#!/bin/sh
# 
# Copyright (c) 2015-2016, Gregory M. Kurtzer. All rights reserved.
# 
# “Singularity” Copyright (c) 2016, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
# 
# If you have questions about your rights to use or distribute this software,
# please contact Berkeley Lab's Innovation & Partnerships Office at
# IPO@lbl.gov.
# 
# NOTICE.  This Software was developed under funding from the U.S. Department of
# Energy and the U.S. Government consequently retains certain rights. As such,
# the U.S. Government has been granted for itself and others acting on its
# behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software
# to reproduce, distribute copies to the public, prepare derivative works, and
# perform publicly and display publicly, and to permit other to do so. 
# 
# 



load_mod sappfile

UUID_DIR="containers"
NAME_DIR="names"
LOCK_DIR="locks"
RUNKEY_DIR="runkeys"

if [ -z "$CACHEDIR" ]; then
    if [ -n "$SINGULARITY_CACHEDIR" ]; then
        USERNAME=`id -un`
        CACHEDIR="$SINGULARITY_CACHEDIR/cache.$USERNAME"
    else
        CACHEDIR="$HOME/.singularity-cache"
    fi

    message 2 "Using CACHEDIR=$CACHEDIR\n"
fi

if [ ! -d "$CACHEDIR" ]; then
    message 2 "Creating CACHEDIR: $CACHEDIR\n"
    if ! mkdir -p "$CACHEDIR"; then
        message ERROR "Could not create CACHEDIR ($CACHEDIR)\n"
        exit 1
    fi
fi

if [ ! -d "$CACHEDIR/$UUID_DIR" ]; then
    message 2 "Creating UUID_DIR: $CACHEDIR/$UUID_DIR\n"
    mkdir -p "$CACHEDIR/$UUID_DIR"
fi
if [ ! -d "$CACHEDIR/$NAME_DIR" ]; then
    message 2 "Creating NAME_DIR: $CACHEDIR/$NAME_DIR\n"
    mkdir -p "$CACHEDIR/$NAME_DIR"
fi
if [ ! -d "$CACHEDIR/$LOCK_DIR" ]; then
    message 2 "Creating LOCK_DIR: $CACHEDIR/$LOCK_DIR\n"
    mkdir -p "$CACHEDIR/$LOCK_DIR"
fi
if [ ! -d "$CACHEDIR/$RUNKEY_DIR" ]; then
    message 2 "Creating RUNKEY_DIR: $CACHEDIR/$RUNKEY_DIR\n"
    mkdir -p "$CACHEDIR/$RUNKEY_DIR"
fi

export CACHEDIR




###### TESTS #######

cache_sappuuidexists() {
    SAPPUUID="$1"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPP UUID undefined\n"
        exit 1
    fi

    if [ -f "$CACHEDIR/$UUID_DIR/$SAPPUUID/installed" ]; then
        return 0
    fi

    return 1
}



cache_sappnameexists() {
    SAPPNAME="$1"

    if [ -z "$SAPPNAME" ]; then
        message ERROR "SAPPNAME undefined\n"
        exit 1
    fi

    if cache_sappname2uuid "$SAPPNAME" "SAPPUUID"; then
        if cache_sappuuidexists "$SAPPUUID"; then
            return 0
        fi
    fi

    return 1
}






###### POINTER #######

# INPUT 1: Runkey name
# INPUT 2: Variable name to populate the SAPPDIR location
# RETURN: True if that runkey is installed
cache_runkey_sappdir() {
    RUNKEY="$1"
    VARNAME="$2"

    if [ -f "$CACHEDIR/$RUNKEY_DIR/$RUNKEY/installed" ]; then
        eval "$VARNAME='$CACHEDIR/$RUNKEY_DIR/$RUNKEY'"
        return 0
    fi

    return 1
}

# INPUT 1: UUID
# INPUT 2: Variable name to populate the SAPPDIR location
# RETURN: True if that runkey is installed
cache_sappdir() {
    SAPPUUID="$1"
    VARNAME="$2"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPPUUID undefined\n"
        exit 1
    fi

    if [ -d "$CACHEDIR/$UUID_DIR/$SAPPUUID" ]; then
        eval "$VARNAME='$CACHEDIR/$UUID_DIR/$SAPPUUID'"
        return 0
    fi

    return 1
}


# INPUT 1: SAPP name
# INPUT 2: Variable name to populate the SAPPDIR location
# RETURN: True if that SAPP name is installed
cache_sappname2uuid() {
    SAPPNAME="$1"
    VARNAME="$2"

    if [ -z "$SAPPNAME" ]; then
        message ERROR "SAPPNAME undefined\n"
        exit 1
    fi

    if cache_sappuuidexists "$SAPPNAME"; then
        eval "$VARNAME='$SAPPNAME'"
        return 0
    elif [ -f "$CACHEDIR/$NAME_DIR/$SAPPNAME" ]; then
        TMP=`tail -n 1 "$CACHEDIR/$NAME_DIR/$SAPPNAME"`
        eval "$VARNAME='$TMP'"
        return 0
    fi

    return 1
}


# INPUT 1: SAPP UUID
# INPUT 2: Variable name to populate the SAPP name
# RETURN: True if that UUID is installed and the name is properly defined
cache_sappuuid2name() {
    SAPPUUID="$1"
    VARNAME="$2"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPPUUID undefined\n"
        exit 1
    fi

    if [ -f "$CACHEDIR/$UUID_DIR/$SAPPUUID/name" ]; then
        read tmp < "$CACHEDIR/$UUID_DIR/$SAPPUUID/name"
        eval "$VARNAME='$tmp'"
        return 0
    fi

    eval "$VARNAME='UNDEFINED'"
    return 1
}



# INPUT 1: SAPP UUID
# INPUT 2: Variable name to populate the SAPP sum
# RETURN: True if that UUID is installed and the name is properly defined
disabled_cache_sappsum() {
    SAPPUUID="$1"
    VARNAME="$2"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPPUUID undefined\n"
        exit 1
    fi

    if [ -f "$CACHEDIR/$UUID_DIR/$SAPPUUID/sum" ]; then
        read tmp < "$CACHEDIR/$UUID_DIR/$SAPPUUID/sum"
        eval "$VARNAME='$tmp'"
        return 0
    fi

    eval "$VARNAME='UNDEFINED'"
    return 1
}



# INPUT 1: SAPP UUID
# INPUT 2: Variable name to populate the SAPP summary
# RETURN: True if that UUID is installed and the name is properly defined
cache_sappsummary() {
    SAPPUUID="$1"
    VARNAME="$2"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPPUUID undefined\n"
        exit 1
    fi

    if [ -f "$CACHEDIR/$UUID_DIR/$SAPPUUID/summary" -a -s "$CACHEDIR/$UUID_DIR/$SAPPUUID/summary" ]; then
        read tmp < "$CACHEDIR/$UUID_DIR/$SAPPUUID/summary"
        eval "$VARNAME='$tmp'"
        return 0
    fi

    eval "$VARNAME='--'"
    return 1
}



# INPUT 1: SAPP UUID
# INPUT 2: Variable name to populate the SAPP size
# RETURN: True if that UUID is installed and the name is properly defined
cache_sappsize() {
    SAPPUUID="$1"
    VARNAME="$2"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPPUUID undefined\n"
        exit 1
    fi

    if [ -d "$CACHEDIR/$UUID_DIR/$SAPPUUID/c" ]; then
        SIZE=`du -sh "$CACHEDIR/$UUID_DIR/$SAPPUUID/c" | cut -f 1`
        eval "$VARNAME='$SIZE'"
        return 0
    fi

    eval "$VARNAME='--'"
    return 1
}





###### OUTPUT #######


cache_sappnamelist() {
    if cd "$CACHEDIR/$NAME_DIR" 2>/dev/null; then
        for name in `ls -t $@ 2>/dev/null`; do
            if [ -f "$name" ]; then
                echo "$name"
            fi
        done
    fi
}

cache_sappdelete() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPP UUID undefined\n"
        exit 1
    fi

    if [ -f "$SAPPDIR/name" ]; then
        NAME=`cat "$SAPPDIR/name"`
    fi
    if [ -f "$CACHEDIR/$NAME_DIR/$NAME" ]; then
        if ! sed -i "/^$SAPPUUID$/d" "$CACHEDIR/$NAME_DIR/$NAME"; then
            message ERROR "WARNING: Could not remove UUID from name file\n"
        fi
        if [ ! -s "$CACHEDIR/$NAME_DIR/$NAME" ]; then
            rm -f "$CACHEDIR/$NAME_DIR/$NAME"
        fi
    fi

    if ! rm -rf "$SAPPDIR" >/dev/null 2>&1; then
        message ERROR "Could not completely remove $SAPPNAME\n"
        exit 1
    fi
}

cache_sapplist() {
    if cd "$CACHEDIR/$NAME_DIR" 2>/dev/null; then
        for name in `ls -t $@ 2>/dev/null`; do
            if [ -f "$name" ]; then
                cat "$name"
                FOUND=1
            fi
        done
    fi
    if [ -z "$FOUND" ]; then
        if cd "$CACHEDIR/$UUID_DIR" 2>/dev/null; then
            for uuid in $@; do
                if [ -d "$uuid" ]; then
                    echo "$uuid"
                fi
            done
        fi
    fi
}

cache_sappfilecheck() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPP UUID undefined\n"
        exit 1
    fi

    if [ ! -f "$SAPPDIR/files" ]; then
        message ERROR "File checksums not found for this SAPP\n"
        exit 1
    fi
    if cache_sappuuidexists "$SAPPUUID"; then
        if ! cd "$SAPPDIR/c" 2>/dev/null; then
            message ERROR "Could not chdir to SAPP directory\n"
            return 1
        fi

        if ! md5sum -c "$SAPPDIR/files"; then
            message ERROR "Cached file check failed, something has changed!\n"
            return 1
        fi
    fi
}


cache_sappcheck() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message ERROR "SAPP UUID undefined\n"
        exit 1
    fi

    if [ ! -d "$SAPPDIR" ]; then
        return 1
    fi

    if [ ! -x "$SAPPDIR/c/singularity" ]; then
        return 1
    fi

    return 0
}




###### OPERATIONAL #######

cache_sappinstall() {
    if [ -z "$SAPPUUID" ]; then
        SAPPUUID=`sappfile_uuid "$SAPPFILE"`
    fi

    LOCKFILE="$CACHEDIR/$LOCK_DIR/$SAPPUUID.lock"

    (
        if flock -x -n 9; then
            _sappinstall "$SAPPFILE" "$SAPPUUID"
            flock -u 9
        else
            message 2 "Waiting on another installation process to complete...\n"
            flock -x 9
        fi
    ) 9> "$LOCKFILE"

    cache_sappcheck "$SAPPUUID"

    return $?
}

_sappinstall() {
    if [ -z "$SAPPFILE" ]; then
        message ERROR "SAPPFILE undefined\n"
        exit 1
    fi
    if [ ! -f "$SAPPFILE" ]; then
        message ERROR "Could not find: $SAPPFILE\n"
        exit 1
    fi
    if ! sappfile_issapp "$SAPPFILE"; then
        message ERROR "File is not Singularity App/container: $SAPPFILE\n"
        exit 1
    fi

    if [ -z "$SAPPUUID" ]; then
        SAPPUUID=`sappfile_uuid "$SAPPFILE"`
    fi
    if [ -z "$SAPPNAME" ]; then
        SAPPNAME=`sappfile_name "$SAPPFILE"`
    fi

    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -n "$SAPPRUNKEY" ]; then
        message 2 "Adding RUNKEY link\n"
        if ! ln -sf "../$UUID_DIR/$SAPPUUID" "$CACHEDIR/$RUNKEY_DIR/$SAPPRUNKEY" 2>/dev/null; then
            message ERROR "Could not create runkey\n"
            exit 1
        fi
    fi

    if cache_sappuuidexists "$SAPPUUID"; then
        message 2 "Singularity container is already installed: $SAPPNAME\n"
        return 0
    fi

    if [ ! -d "$SAPPDIR" ]; then
        message 2 "Creating SAPP cache directory\n"
        if ! mkdir -p "$SAPPDIR"; then
            message ERROR "Could not create SAPP cache directory: $SAPPDIR\n"
            exit 1
        fi
    fi

    message 2 "Installing Singularity Container...\n"
    message 2 "Caching SAPP archive to: $SAPPDIR\n"
    sappfile_payload "$SAPPFILE" | gunzip -dc | (cd "$SAPPDIR"; cpio -id --quiet)

    if [ ! -d "$SAPPDIR/c/etc/" ]; then
        mkdir -p "$SAPPDIR/c/etc/"
    fi
    if [ -n "$USER" ]; then
        message 2 "Including user's entry in /etc/passwd\n"
        grep "^$USER:" /etc/passwd 2>/dev/null >> "$SAPPDIR/c/etc/passwd"
        message 2 "Including user's primary group entry in /etc/group\n"
        GID=`id -g`
        grep ":x:$GID:" /etc/group 2>/dev/null >> "$SAPPDIR/c/etc/group"
        message 2 "Including user's supplementary group entries in /etc/group\n"
        egrep "(:|,)$USER(,|$)" /etc/group 2>/dev/null >> "$SAPPDIR/c/etc/group"
    fi

    message 2 "Creating default /etc/nsswitch.conf\n";
    echo "passwd:     files sss" > "$SAPPDIR/c/etc/nsswitch.conf"
    echo "shadow:     files sss" >> "$SAPPDIR/c/etc/nsswitch.conf"
    echo "group:      files sss" >> "$SAPPDIR/c/etc/nsswitch.conf"
    echo "hosts:      files dns myhostname" >> "$SAPPDIR/c/etc/nsswitch.conf"

    if [ -e "$SAPPDIR/c/etc/resolv.conf" ]; then
        message WARN "Not updating the /etc/resolv.conf as it exists in the container\n"
    else
        message 2 "Including host's /etc/resolv.conf\n";
        /bin/cp /etc/resolv.conf "$SAPPDIR/c/etc/resolv.conf"
    fi

    if [ -e "$SAPPDIR/c/etc/hosts" ]; then
        message WARN "Not updating the /etc/hosts as it exists in the container\n"
    else
        message 2 "Including host's /etc/hosts\n";
        /bin/cp /etc/hosts "$SAPPDIR/c/etc/hosts"
    fi

    message 2 "Calculating checksums\n"
    (cd "$SAPPDIR/c"; find . -type f | xargs md5sum) > "$SAPPDIR/files"

    message 2 "Adding UUID to name file\n"
    echo "$SAPPUUID" >> "$CACHEDIR/$NAME_DIR/$SAPPNAME"

    message 2 "Finishing up container installation\n"
    date > "$SAPPDIR/installed"

    return 0
}



