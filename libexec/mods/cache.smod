#!/bin/sh
# 
# Copyright (c) 2015-2016, Gregory M. Kurtzer
# All rights reserved.
# 
# Copyright (c) 2015-2016, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of
# any required approvals from the U.S. Dept. of Energy).
# All rights reserved.
# 
# 


load_mod sappfile


if [ -z "$CACHEDIR" -o -z "$TMPCACHEDIR" ]; then
    if [ -n "$SINGULARITY_CACHEDIR" ]; then
        USERNAME=`id -un`
        CACHEDIR="$SINGULARITY_CACHEDIR/cache.$USERNAME"
        TMPCACHEDIR="$SINGULARITY_CACHEDIR/tmp.$USERNAME"
    else
        CACHEDIR="$HOME/.singularity-cache"
        TMPCACHEDIR="/tmp"
    fi

    message 2 "Using CACHEDIR=$CACHEDIR\n"
    message 2 "Using TMPCACHEDIR=$TMPCACHEDIR\n"
fi

if [ ! -d "$CACHEDIR" ]; then
    message 2 "Creating CACHEDIR: $CACHEDIR\n"
    if ! mkdir -p "$CACHEDIR"; then
        message 0 "ERROR: Could not create CACHEDIR ($CACHEDIR)\n"
        exit 1
    fi
fi
if [ ! -d "$TMPCACHEDIR" ]; then
    message 2 "Creating TMPCACHEDIR: $TMPCACHEDIR\n"
    if ! mkdir -p "$TMPCACHEDIR"; then
        message 0 "ERROR: Could not create CACHEDIR ($TMPCACHEDIR)\n"
        exit 1
    fi
fi

export CACHEDIR TMPCACHEDIR


cache_sappinstall() {
    SAPPFILE="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPFILE" ]; then
        message 0 "ERROR: SAPPFILE undefined\n"
        exit 1
    fi
    if [ ! -f "$SAPPFILE" ]; then
        message 0 "ERROR: Could not find: $SAPPFILE\n"
        exit 1
    fi
    if ! sappfile_issapp "$SAPPFILE"; then
        message 0 "ERROR: File is not Singularity App/container: $SAPPFILE\n"
        exit 1
    fi
    if [ -z "$SAPPNAME" -a -n "$SAPPFILE" ]; then
        SAPPNAME=`basename "$SAPPFILE" | sed -e 's@.sapp$@@'`
    fi
    if [ ! -d "$SAPPDIR" ]; then
        message 2 "Creating SAPP cache directory\n"
        if ! mkdir -p "$SAPPDIR"; then
            message 0 "ERROR: Could not create SAPP cache directory: $SAPPDIR\n"
            exit 1
        fi
    fi

    message 1 "Installing Singularity Container...\n"
    message 2 "Caching SAPP archive to: $SAPPDIR\n"
    sappfile_payload "$SAPPFILE" | gunzip -dc | (cd "$SAPPDIR"; cpio -id --quiet)
    message 2 "Caching MD5sum of SAPPFILE\n"
    md5sum "$SAPPFILE" | awk '{print $1}' > "$SAPPDIR/sum"

    if [ ! -d "$SAPPDIR/c/etc/" ]; then
        mkdir -p "$SAPPDIR/c/etc/"
    fi
    if [ -n "$USER" ]; then
        message 2 "Including user's entry in /etc/passwd\n"
        grep "^$USER:" /etc/passwd 2>/dev/null >> "$SAPPDIR/c/etc/passwd"
        message 2 "Including user's primary group entry in /etc/group\n"
        GID=`id -g`
        grep ":x:$GID:" /etc/group 2>/dev/null >> "$SAPPDIR/c/etc/group"
        message 2 "Including user's supplementary group entries in /etc/group\n"
        egrep "(:|,)$USER(,|$)" /etc/group 2>/dev/null >> "$SAPPDIR/c/etc/group"
    fi


    return 0
}


cache_filesum() {
    SAPPNAME="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    message 1 "Calculating checksums\n"
    (cd "$SAPPDIR/c"; find . -type f | xargs md5sum) > "$SAPPDIR/files"

    return 0
}


cache_sappsum() {
    SAPPNAME="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    if [ ! -f "$SAPPDIR/sum" ]; then
        return 1
    fi
    cat "$SAPPDIR/sum"
}


cache_sappsummary() {
    SAPPNAME="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    if [ ! -f "$SAPPDIR/summary" ]; then
        return 1
    fi
    cat "$SAPPDIR/summary"
}


cache_sappdir() {
    SAPPNAME="$1"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi
    if ! cache_sappexists "$SAPPNAME"; then
        return 1
    fi
    echo "$CACHEDIR/$SAPPNAME"
}


cache_sappsize() {
    SAPPNAME="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    SIZE_K=`du -sk "$SAPPDIR/c" | cut -f 1`
    SIZE_M=`echo -ne "scale=1\n$SIZE_K/ 1024\n" | bc`
    echo $SIZE_M
}


cache_sappexists() {
    SAPPNAME="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    if [ -x "$SAPPDIR/c/singularity" ]; then
        return 0
    elif [ -d "$SAPPDIR" ]; then
        message 0 "ERROR: Invalid container cache: $SAPPNAME\n"
    fi
    message 0 "ERROR: Uncached container: $SAPPNAME\n"
    return 1
}

cache_sappdelete() {
    SAPPNAME="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    if ! rm -rf "$SAPPDIR" >/dev/null 2>&1; then
        message 0 "ERROR: Could not completely remove $SAPPNAME\n"
        exit 1
    fi
}

cache_sapplist() {
    if [ -z "$1" ]; then
        ALL="*"
    fi
    if cd "$CACHEDIR" 2>/dev/null; then
        for i in $@ $ALL; do
            if [ "$i" = "*" ]; then
                return 0
            elif cache_sappexists "$i"; then
                echo "$i"
            fi
        done
    fi
}

cache_sappfilecheck() {
    SAPPNAME="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi
    if [ ! -f "$SAPPDIR/files" ]; then
        message 0 "ERROR: File checksums not found for this SAPP\n"
        exit 1
    fi
    ( if cache_sappexists "$SAPPNAME"; then
        if ! cd "$SAPPDIR/c" 2>/dev/null; then
            message 0 "ERROR: Could not chdir to SAPP directory\n"
            exit 1
        fi

        if ! md5sum -c "$SAPPDIR/files"; then
            message 0 "ERROR: Cached file check failed, something has changed!\n"
            exit 1
        fi
    fi )
    if [ "$?" != "0" ]; then
        return 1
    fi
}


