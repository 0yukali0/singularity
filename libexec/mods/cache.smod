#!/bin/sh
# 
# Copyright (c) 2015-2016, Gregory M. Kurtzer
# All rights reserved.
# 
# Copyright (c) 2015-2016, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of
# any required approvals from the U.S. Dept. of Energy).
# All rights reserved.
# 
# 


load_mod sappfile

UUID_DIR="containers"
NAME_DIR="names"
LOCK_DIR="locks"

if [ -z "$CACHEDIR" ]; then
    if [ -n "$SINGULARITY_CACHEDIR" ]; then
        USERNAME=`id -un`
        CACHEDIR="$SINGULARITY_CACHEDIR/cache.$USERNAME"
    else
        CACHEDIR="$HOME/.singularity-cache"
    fi

    message 2 "Using CACHEDIR=$CACHEDIR\n"
fi

if [ ! -d "$CACHEDIR" ]; then
    message 2 "Creating CACHEDIR: $CACHEDIR\n"
    if ! mkdir -p "$CACHEDIR"; then
        message 0 "ERROR: Could not create CACHEDIR ($CACHEDIR)\n"
        exit 1
    fi
fi

if [ ! -d "$CACHEDIR/$UUID_DIR" ]; then
    message 2 "Creating UUID_DIR: $CACHEDIR/$UUID_DIR\n"
    mkdir -p "$CACHEDIR/$UUID_DIR"
fi
if [ ! -d "$CACHEDIR/$NAME_DIR" ]; then
    message 2 "Creating NAME_DIR: $CACHEDIR/$NAME_DIR\n"
    mkdir -p "$CACHEDIR/$NAME_DIR"
fi

export CACHEDIR



cache_sappinstall() {
    SAPPFILE="$1"
    SAPPUUID=`sappfile_uuid "$SAPPFILE"`
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ ! -d "$SAPPDIR" ]; then
        message 2 "Creating SAPP cache directory\n"
        if ! mkdir -p "$SAPPDIR"; then
            message 0 "ERROR: Could not create SAPP cache directory: $SAPPDIR\n"
            exit 1
        fi
    fi

    exec 99> "$SAPPDIR/lock"
    if flock -x -n 99; then
        _sappinstall "$SAPPFILE" "$SAPPUUID"
        flock -u 99
    else
        message 2 "Waiting on another installation process to complete...\n"
        flock -x 99
    fi

    cache_sappcheck "$SAPPUUID"

    return $?
}

_sappinstall() {
    SAPPFILE="$1"
    SAPPUUID="$2"
    SAPPNAME=`sappfile_name "$SAPPFILE"`
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPFILE" ]; then
        message 0 "ERROR: SAPPFILE undefined\n"
        exit 1
    fi
    if [ ! -f "$SAPPFILE" ]; then
        message 0 "ERROR: Could not find: $SAPPFILE\n"
        exit 1
    fi
    if ! sappfile_issapp "$SAPPFILE"; then
        message 0 "ERROR: File is not Singularity App/container: $SAPPFILE\n"
        exit 1
    fi

    if cache_sappuuidexists "$SAPPUUID"; then
        message 2 "Singularity container is already installed: $SAPPNAME\n"
        return 0
    fi

    message 2 "Installing Singularity Container...\n"
    message 2 "Caching SAPP archive to: $SAPPDIR\n"
    sappfile_payload "$SAPPFILE" | gunzip -dc | (cd "$SAPPDIR"; cpio -id --quiet)
    message 2 "Caching MD5sum of SAPPFILE\n"
    md5sum "$SAPPFILE" | awk '{print $1}' > "$SAPPDIR/sum"

    if [ ! -d "$SAPPDIR/c/etc/" ]; then
        mkdir -p "$SAPPDIR/c/etc/"
    fi
    if [ -n "$USER" ]; then
        message 2 "Including user's entry in /etc/passwd\n"
        grep "^$USER:" /etc/passwd 2>/dev/null >> "$SAPPDIR/c/etc/passwd"
        message 2 "Including user's primary group entry in /etc/group\n"
        GID=`id -g`
        grep ":x:$GID:" /etc/group 2>/dev/null >> "$SAPPDIR/c/etc/group"
        message 2 "Including user's supplementary group entries in /etc/group\n"
        egrep "(:|,)$USER(,|$)" /etc/group 2>/dev/null >> "$SAPPDIR/c/etc/group"
    fi

    message 2 "Calculating checksums\n"
    (cd "$SAPPDIR/c"; find . -type f | xargs md5sum) > "$SAPPDIR/files"

    message 2 "Adding UUID to name file\n"
    echo "$SAPPUUID" >> "$CACHEDIR/$NAME_DIR/$SAPPNAME"

    return 0
}


cache_sappdir() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message 0 "ERROR: SAPPUUID undefined\n"
        exit 1
    fi

    if [ ! -d "$SAPPDIR" ]; then
        return 1
    fi

    echo "$SAPPDIR"
}

cache_sappname2uuid() {
    SAPPNAME="$1"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    if cache_sappuuidexists "$SAPPNAME"; then
        echo "$SAPPNAME"
    elif [ -f "$CACHEDIR/$NAME_DIR/$SAPPNAME" ]; then
        tail -n 1 "$CACHEDIR/$NAME_DIR/$SAPPNAME"
    else
        return 1
    fi
}

cache_sappname2uuids() {
    SAPPNAME="$1"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    if cache_sappuuidexists "$SAPPNAME"; then
        echo "$SAPPNAME"
    elif [ -f "$CACHEDIR/$NAME_DIR/$SAPPNAME" ]; then
        cat "$CACHEDIR/$NAME_DIR/$SAPPNAME"
    else
        return 1
    fi
}

cache_sappuuid2name() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message 0 "ERROR: SAPPUUID undefined\n"
        exit 1
    fi

    if [ ! -f "$SAPPDIR/name" ]; then
        return 1
    fi
    cat "$SAPPDIR/name"
}


cache_sappnameexists() {
    SAPPNAME="$1"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi

    if [ -f "$CACHEDIR/$NAME_DIR/$SAPPNAME" -a -s "$CACHEDIR/$NAME_DIR/$SAPPNAME" ]; then
        return 0
    else
        return 1
    fi
}

cache_sappuuidexists() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message 0 "ERROR: SAPP UUID undefined\n"
        exit 1
    fi

    if [ -d "$SAPPDIR/c" ]; then
        return 0
    fi
    return 1
}

cache_sappsum() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message 0 "ERROR: SAPPUUID undefined\n"
        exit 1
    fi

    if [ ! -f "$SAPPDIR/sum" ]; then
        echo "UNDEFINED"
        return 1
    fi
    cat "$SAPPDIR/sum"
}


cache_sappsummary() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message 0 "ERROR: SAPPUUID undefined\n"
        exit 1
    fi

    if [ ! -f "$SAPPDIR/summary" ]; then
        echo "UNDEFINED"
        return 1
    fi
    cat "$SAPPDIR/summary"
}


cache_sappsize() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message 0 "ERROR: SAPPUUID undefined\n"
        exit 1
    fi

    SIZE_K=`du -sk "$SAPPDIR/c" | cut -f 1`
    SIZE_M=`echo -ne "scale=1\n$SIZE_K/ 1024\n" | bc`
    echo $SIZE_M
}


cache_sappdelete() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message 0 "ERROR: SAPP UUID undefined\n"
        exit 1
    fi

    if [ -f "$SAPPDIR/name" ]; then
        NAME=`cat "$SAPPDIR/name"`
    fi
    if [ -f "$CACHEDIR/$NAME_DIR/$NAME" ]; then
        if ! sed -i "/^$SAPPUUID$/d" "$CACHEDIR/$NAME_DIR/$NAME"; then
            message 0 "WARNING: Could not remove UUID from name file\n"
        fi
        if [ ! -s "$CACHEDIR/$NAME_DIR/$NAME" ]; then
            rm -f "$CACHEDIR/$NAME_DIR/$NAME"
        fi
    fi

    if ! rm -rf "$SAPPDIR" >/dev/null 2>&1; then
        message 0 "ERROR: Could not completely remove $SAPPNAME\n"
        exit 1
    fi
}

cache_sapplist() {
    if [ -z "$1" ]; then
        ALL="*"
    fi
    if cd "$CACHEDIR/$NAME_DIR" 2>/dev/null; then
        for name in `ls -t $@ $ALL 2>/dev/null`; do
            cat "$name"
        done
    fi
}

cache_sappfilecheck() {
message 0 "FIXME: Update to uuid\n"
    SAPPNAME="$1"
    SAPPDIR="$CACHEDIR/$SAPPNAME"

    if [ -z "$SAPPNAME" ]; then
        message 0 "ERROR: SAPPNAME undefined\n"
        exit 1
    fi
    if [ ! -f "$SAPPDIR/files" ]; then
        message 0 "ERROR: File checksums not found for this SAPP\n"
        exit 1
    fi
    ( if cache_sappexists "$SAPPNAME"; then
        if ! cd "$SAPPDIR/c" 2>/dev/null; then
            message 0 "ERROR: Could not chdir to SAPP directory\n"
            exit 1
        fi

        if ! md5sum -c "$SAPPDIR/files"; then
            message 0 "ERROR: Cached file check failed, something has changed!\n"
            exit 1
        fi
    fi )
    if [ "$?" != "0" ]; then
        return 1
    fi
}


cache_sappcheck() {
    SAPPUUID="$1"
    SAPPDIR="$CACHEDIR/$UUID_DIR/$SAPPUUID"

    if [ -z "$SAPPUUID" ]; then
        message 0 "ERROR: SAPP UUID undefined\n"
        exit 1
    fi

    if [ ! -d "$SAPPDIR" ]; then
        return 1
    fi

    if [ ! -x "$SAPPDIR/c/singularity" ]; then
        return 1
    fi

    return 0
}

