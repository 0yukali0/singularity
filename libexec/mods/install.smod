#!/bin/bash
# 
# Copyright (c) 2015-2016, Gregory M. Kurtzer. All rights reserved.
# 
# “Singularity” Copyright (c) 2016, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
# 
# If you have questions about your rights to use or distribute this software,
# please contact Berkeley Lab's Innovation & Partnerships Office at
# IPO@lbl.gov.
# 
# NOTICE.  This Software was developed under funding from the U.S. Department of
# Energy and the U.S. Government consequently retains certain rights. As such,
# the U.S. Government has been granted for itself and others acting on its
# behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software
# to reproduce, distribute copies to the public, prepare derivative works, and
# perform publicly and display publicly, and to permit other to do so. 
# 
# 


# Dependency resolvers must register their own functions to these lists
ALL_RESOLVERS=" " # Run these on all files
BIN_RESOLVERS=" " # Run these on all executable files
TXT_RESOLVERS=" " # Run these on all text scripts and data files

export ALL_RESOLVERS BIN_RESOLVERS TXT_RESOLVERS


for i in $libexecdir/singularity/mods/*.dep; do
    if [ -f "$i" ]; then
        . "$i"
    fi
done

message 2 "ALL_RESOLVERS='$ALL_RESOLVERS'\n";
message 2 "BIN_RESOLVERS='$BIN_RESOLVERS'\n";
message 2 "TXT_RESOLVERS='$TXT_RESOLVERS'\n";


dep_resolver() {
    if [ -n "$NODEPS" ]; then
        return 0
    fi
    if [ -f "$1" ]; then
        read TYPE OPTS < <(/usr/libexec/singularity/ftype "$1")
        if [ -n "$TYPE" ]; then
            message 2 "Evaluating file: $1 ($TYPE)\n"
            case "$TYPE" in
                exe-binary*)
                    for i in $BIN_RESOLVERS; do
                        message 3 "calling bin_resolvers on: $1 : $i\n"
                        eval $i "$1" "$OPTS"
                    done
                ;;
                *ascii*)
                    for i in $TXT_RESOLVERS; do
                        message 3 "calling txt_resolvers on: $1 : $i\n"
                        eval $i "$1" "$OPTS"
                    done
                ;;
                *) 
                    for i in $ALL_RESOLVERS; do
                        message 3 "calling all_resolvers on: $1 : $i\n"
                        eval $i "$1" "$OPTS"
                    done
                ;;
            esac
        fi
    fi
    return 0
}



install_single_file() {
    file="$1"
    targetpath="$2"
    filename=`basename "$file"`

    message 2 "Called install_single_file on: '$file', '$targetpath'\n"

    if [ -z "$targetpath" ]; then
        targetpath=`dirname "$file"`
    fi

    if [ -e "$INSTALLDIR/c/$targetpath/$filename" ]; then
        message 2 "File exists, skipping: $targetpath/$filename\n"
        return 0
    fi

    if [ -e "$file" ]; then
        if [ -d "$file" ]; then
            if [ ! -d "$INSTALLDIR/c/$targetpath/$filename" ]; then
                message 1 "Creating dir   : $targetpath/$filename\n"
                mkdir -p "$INSTALLDIR/c/$targetpath/$filename"
                return 0
            fi
        else
            if [ -z "$targetpath" ]; then
                targetpath=`dirname "$file"`
            fi
            if [ ! -d "$INSTALLDIR/c/$targetpath" ]; then
                message 1 "Creating dir   : $targetpath\n"
                mkdir -p "$INSTALLDIR/c/$targetpath"
            fi

            message 1 "Installing file: $targetpath/$filename\n"
            if ! /bin/cp -apL "$file" "$INSTALLDIR/c/$targetpath/$filename"; then
                message ERROR "Could not copy file to container: $file\n"
                exit 1
            fi
            if ! dep_resolver "$file"; then
                message ERROR "Could not resolve dependencies for: $file\n"
                exit 1
            fi
        fi
    else
        message ERROR "File not found: $file\n"
        exit 1
    fi
}



install_file() {
    file="$1"
    target="$2"

    if [ -f "$file" -o -L "$file" ]; then
        install_single_file "$file" "$target"
    else
        FOUND=0
        for i in `/bin/sh -c "find $file" 2>/dev/null || echo "$file"`; do
            install_single_file "$i" "$target"
            FOUND=1
        done
        if [ "$FOUND" = "0" ]; then
            return 1
        fi
    fi

    return 0

}
