Singularity is a portable application stack packaging and runtime utility.

There are several methods to implement portable application stacks at
present. Among them are containers and virtual machines. When using these
solutions to package a single application (or application stack), one ends
up having to manage the entire operating system overhead (security, updates,
size/bulk, etc..) just to distribute a single application or workflow. While
virtual machines and containers have strong usage benefits, application
portability and distribution is not an effecient use of these technologies.

Singularity works on a completely different perspective. Contrary to building
and managing an entire operating system envrionment (for the sake of
portability and reproducibility of an application stack), Singularity works
on the opposite premis. By configuration of an application stack spec via a
configuration file, coupled with automatic dependency resolution to achieve
portability, Singularity can create minimalistic singlet "app" which can
easily be copied from system to systemand run using Singularity on different
systems.

In a manner of speaking, this is an OS X style application framework for
Linux.

Singularity provides two primary functions:

1. SINGULARITY-BUILD
    This is the package build tool which is responsible for creating the
    Singularity Application (.sapp) package which can be run as a standalone
    program. The process of building a .sapp package is determined by a
    configuration which defines what components of the underlying envrionment
    should be included and how to run those components. Additionally, it
    scans the application to identify the runtime dependencies for OS level
    portability.

    The .sapp package could be built to run exactly as it would normally be
    called on the command line environment (e.g. arguments, files, IO, etc..)
    or it could be packaged to be completely self contained. For example, it
    could be reasonable for someone to want to package a web server with
    their web application already bundled within a single .sapp file. To
    start the entire application stack, you simply run the .sapp file through
    Singularity (and thus it could start PostgreSQL, Apache, from within the
    environment).

2. SINGULARITY (runtime)
    The Singularity application itself understands how to read a .sapp
    package and executes the portable runtime envrionment. As mentioned above,
    the package itself could be built in a manner to emulate the standard
    runtime arguments of a standalone binary, or it could run the entire
    application package in a self contained manner.


The "Singularity Application Spec" is the configuration file to which you
define your application stack for the build process. Here are some valid
configuration paramaters you can use (more options are in development):

    name        This is the name of the application stack
    program     The program(s)/binaries you wish to include in this
                application stack. This will automatically trigger
                library dependency resolution for every program listed.
    file        Any non-program file that you wish to include. Globs ok.
    run         Typically the runscript will be autmatically generated
                based on the first program defined above. You can
                replace or customize the runscript here (multiple "run"s
                are supported).

Application Spec Example:

    # Name this SAPP
    name find-example

    # Define the programs to include
    program /usr/bin/find /bin/xargs /bin/ls

    # Define any other files you want to include
    file /etc/passwd /etc/group
    file /etc/fstab

    # Use a custom runscript
    run echo "Example application stack"
    run find $@ | xargs | ls -l


Usage Examples:
    This is a very simple example of packaging up /bin/find and turning it
    into a portable .sapp package. This .sapp package can be copied to other
    systems that even have an incompatible glibc and it will run properly.

    $ cd ~
    $ cat find.spec
    program /usr/bin/find
    $ singularity-build find.spec
    ...
    WROTE: find.sapp
    $ singularity find.sapp . -maxdepth 1 | grep sapp
    ./find.sapp

    (more examples and use-cases to come!)
