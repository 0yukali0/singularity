#!/bin/sh


TMPDIR=`mktemp -d /tmp/singularity-build.XXXXXXXX`
INCLUDEBIN="/bin/sh"
LIBSUFFIX=`uname -p | grep -qv x86_64 || echo 64`


includefile() {
    for file in $@; do
        DIRNAME=`dirname $file`
        if [ ! -d "$TMPDIR/$DIRNAME" ]; then
            mkdir -p "$TMPDIR/$DIRNAME"
        fi
        if [ ! -f "$TMPDIR/$file" ]; then
            echo "including file:        $file"
            cp -L "$file" "$TMPDIR/$file"
        fi
    done
}

includebin() {
    for file in $@; do
        DIRNAME=`dirname $file`
        if [ ! -d "$TMPDIR/$DIRNAME" ]; then
            mkdir -p "$TMPDIR/$DIRNAME"
        fi
        if [ ! -f "$TMPDIR/$file" ]; then
            echo "including program:     $file"
            cp -L "$file" "$TMPDIR/$file"
            ldd $file | sed -e 's@ @\n@g' | while read i; do
                if [ -f "$i" ]; then
                    echo " ->dependency:         $i"
                    if [ ! -d "$TMPDIR/lib$LIBSUFFIX" ]; then
                        mkdir -p "$TMPDIR/lib$LIBSUFFIX"
                    fi
                    if [ ! -f "$TMPDIR/lib$LIBSUFFIX/$BASENAME" ]; then
                        cp -L "$i" "$TMPDIR/lib$LIBSUFFIX/$BASENAME"
                    fi
                fi
            done
        fi
    done
}


includelib() {
    for file in $@; do
        DIRNAME=`dirname $file`
        BASENAME=`basename $file`
        if [ ! -d "$TMPDIR/lib$LIBSUFFIX" ]; then
            mkdir -p "$TMPDIR/lib$LIBSUFFIX"
        fi
        echo "including lib$LIBSUFFIX: $file"
        cp -L "$file" "$TMPDIR/lib$LIBSUFFIX/$BASENAME"
    done
}

includelddeps() {
    for file in $@; do
        ldd $file | sed -e 's@ @\n@g' | while read i; do
            if [ -f "$i" ]; then
                includelib $i
            fi
        done
    done
}

cleanup() {
    rm -rf $TMPDIR
}


parseconf() {
    KEY="$1"
    FILE="$2"
    grep "^$KEY " $FILE | while read i; do
        echo "$i" | sed -e "s@^$KEY @@"
    done
}


usage() {
    echo "USAGE: $0 (options) [config] (output file)"
    echo
    echo "CONFIG:"
    echo "  The path to the configruation file spec that defines the application"
    echo "  stack you wish to include in the singularity package."
    echo
    echo "ARGUMENTS:"
    echo "  -h      Print usage summary"
    echo
}


while getopts ":c:" opt; do
    case $opt in
        h)
            usage
            exit
        ;;
        \?)
            echo "Invalid option -$OPTARG" >&2
            exit 1
        ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1;
        ;;
    esac
done

CONFIG=$1
shift
OUTPUT=$1
shift

if [ -z "$CONFIG" ]; then
    usage
    exit 1
fi


PROGRAM=`parseconf program $CONFIG`
FILE=`parseconf file $CONFIG`
RUNFILE=`parseconf run $CONFIG`
NAME=`parseconf name $CONFIG`


if [ -z "$PROGRAM" ]; then
    echo "PROGRAM is undefined!"
    exit 1
fi


if [ -z "$OUTPUT" ]; then
    if [ -z "$NAME" ]; then
        NAME=`basename $CONFIG`
    fi
    OUTPUT="$NAME.sapp"
fi

for i in $PROGRAM; do
    PROGRAM_BIN=`which $i 2>/dev/null`
    includebin $PROGRAM_BIN
#    includelddeps $PROGRAM_BIN
    if [ -z "$PROGFIRST" ]; then
        PROGFIRST="$i"
    fi
done 

for i in $FILE; do
    includefile $i
done


includebin $INCLUDEBIN

includefile /etc/ld.so.cache
includefile /etc/ld.so.conf
includefile /etc/ld.so.conf.d/*
includefile /dev/null

echo "#!/bin/sh" > $TMPDIR/run
echo "PATH=/bin:$PATH" >> $TMPDIR/run
echo "export PATH" >> $TMPDIR/run
if [ -n "$RUNFILE" ]; then
    echo "$RUNFILE" >> $TMPDIR/run
else
    echo "$PROGFIRST \$@" >> $TMPDIR/run
fi
chmod +x $TMPDIR/run


(cd $TMPDIR; find . | cpio -o --quiet -H newc ) | gzip -c9 > $OUTPUT

echo "WROTE: $OUTPUT"


cleanup
exit
